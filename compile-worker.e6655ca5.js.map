{"mappings":"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","sources":["build/js/compile/compile-worker.ts"],"sourcesContent":["// Import the kipper module\n// eslint-disable-next-line no-undef\nimportScripts(\"//cdn.jsdelivr.net/npm/@kipper/core@latest/kipper-standalone.min.js\");\n\n// Import the babel transpiler\n// eslint-disable-next-line no-undef\nimportScripts(\"//unpkg.com/@babel/standalone/babel.min.js\");\n\n// The message handler for the compiler log messages - We don't handle those yet and just log them onto the console\nconst msgHandler = (level, msg) => {\n\t// @ts-ignore\n\t// eslint-disable-next-line no-undef\n\tpostMessage(`[${Kipper.getLogLevelString(level)}]: ${msg}`);\n};\n\n// Global logger for the compiler\n// @ts-ignore\n// eslint-disable-next-line no-undef\nconst logger = new Kipper.KipperLogger(msgHandler);\n\n// Global compiler\n// @ts-ignore\n// eslint-disable-next-line no-undef\nconst compiler = new Kipper.KipperCompiler(logger);\n\n/**\n * Evaluates the passed Kipper code using specific handlers.\n * @param code The translated code to evaluate. (Must be in JavaScript)\n */\nasync function evalKipperCode(code: string) {\n\t// Overwrite 'console.log'\n\tconst prevLog = console.log;\n\tconsole.log = (msg: string) => {\n\t\tpostMessage(msg);\n\t};\n\n\t// Eval the Kipper code\n\teval(code);\n\n\t// Restore old 'console.log'\n\tconsole.log = prevLog;\n}\n\n// Define the handler for worker messages\nonmessage = async function (event) {\n\tconsole.log(\"Received compilation request from main thread. Preparing compilation in Worker.\");\n\n\t// Print version of Kipper\n\t// @ts-ignore\n\t// eslint-disable-next-line no-undef\n\tpostMessage(`Kipper Compiler v${Kipper.version}\\n`);\n\n\t// Compile the code to TypeScript\n\tlet result: string;\n\ttry {\n\t\tresult = (await compiler.compile(event.data, {})).write();\n\t} catch (e) {\n\t\tpostMessage(1);\n\t\tthrow e;\n\t}\n\n\t// Evaluate the code\n\ttry {\n\t\t// Transpile the code from TypeScript to JavaScript\n\t\t// @ts-ignore\n\t\t// eslint-disable-next-line no-undef\n\t\tconst compiledCode = Babel.transform(result, {\n\t\t\tfilename: \"kipper-web-script.ts\",\n\t\t\tpresets: [\"env\", \"typescript\"],\n\t\t});\n\n\t\t// Switch to console output\n\t\tpostMessage(0);\n\n\t\tawait evalKipperCode(compiledCode.code);\n\t} catch (e) {\n\t\tpostMessage(`\\nEncountered Runtime error:\\n  ${(<Error>e).name}: ${(<Error>e).message}`);\n\t\tpostMessage(`\\nIf this is unexpected, please report this bug to the developer on GitHub with your code snippet.`);\n\t\tpostMessage(1);\n\t\tthrow e;\n\t}\n\n\t// Return with exit code 0 (Success)\n\tpostMessage(0);\n};\n"],"names":[],"version":3,"file":"compile-worker.e6655ca5.js.map","sourceRoot":"/"}