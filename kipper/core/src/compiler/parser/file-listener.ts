/**
 * Antlr4 listener for walking through a parser tree and processing its content.
 * @since 0.0.3
 */
import type {
	ActualAdditiveExpressionContext,
	ActualAssignmentExpressionContext,
	ActualCastOrConvertExpressionContext,
	ActualConditionalExpressionContext,
	ActualEqualityExpressionContext,
	ActualLogicalAndExpressionContext,
	ActualLogicalOrExpressionContext,
	ActualMultiplicativeExpressionContext,
	ActualRelationalExpressionContext,
	BoolPrimaryExpressionContext,
	CompilationUnitContext,
	CompoundStatementContext,
	DeclarationContext,
	ExpressionStatementContext,
	FStringPrimaryExpressionContext,
	FunctionCallExpressionContext,
	GenericTypeSpecifierContext,
	IdentifierPrimaryExpressionContext,
	IdentifierTypeSpecifierContext,
	IncrementOrDecrementPostfixExpressionContext,
	IncrementOrDecrementUnaryExpressionContext,
	JumpStatementContext,
	KipperParserListener,
	ArrayLiteralPrimaryExpressionContext,
	NumberPrimaryExpressionContext,
	OperatorModifiedUnaryExpressionContext,
	ParameterDeclarationContext,
	StringPrimaryExpressionContext,
	SwitchLabeledStatementContext,
	TangledPrimaryExpressionContext,
	TypeofTypeSpecifierContext,
	DoWhileLoopIterationStatementContext,
	ExternalItemContext,
	ForLoopIterationStatementContext,
	IfStatementContext,
	InitializerContext,
	ReturnStatementContext,
	SwitchStatementContext,
	VoidOrNullOrUndefinedPrimaryExpressionContext,
	WhileLoopIterationStatementContext,
	FunctionDeclarationContext,
	DeclaratorContext,
	DirectDeclaratorContext,
	ExpressionContext,
	InitDeclaratorContext,
	ParameterListContext,
	StorageTypeSpecifierContext,
	TypeSpecifierContext,
} from "./antlr";
import type { KipperProgramContext } from "../program-ctx";
import { ParserRuleContext } from "antlr4ts";
import {
	type ParserDeclarationContextType,
	type ParserExpressionContextType,
	type ParserStatementContextType,
	Declaration,
	DeclarationASTNodeFactory,
	Expression,
	ExpressionASTNodeFactory,
	Statement,
	StatementASTNodeFactory,
	RootASTNode,
	CompilableASTNode,
} from "../ast";
import { KipperInternalError } from "../../errors";
import {
	BracketNotationMemberAccessExpressionContext,
	DotNotationMemberAccessExpressionContext,
	ExplicitCallFunctionCallExpressionContext,
	LogicalAndExpressionContext,
	PassOnLogicalAndExpressionContext,
	SliceNotationMemberAccessExpressionContext,
	VariableDeclarationContext,
} from "./antlr";

/**
 * The listener for a {@link KipperProgramContext}, which walks through a parse tree generated by Antlr4 and generates
 * an abstract syntax tree based on The parse tree.
 * @since 0.0.3
 */
export class KipperFileListener implements KipperParserListener {
	private readonly _rootNode: RootASTNode;
	private readonly _expressionFactory: ExpressionASTNodeFactory;
	private readonly _statementFactory: StatementASTNodeFactory;
	private readonly _declarationFactory: DeclarationASTNodeFactory;

	/**
	 * If this is true, the current context is inside an external item and automatically indicates
	 * {@link _isFunctionDefinition} is false.
	 */
	private _isExternalItem: boolean;

	/**
	 * If this is true, the current context is inside a function definition and automatically indicates
	 * {@link _isExternalItem} is false.
	 */
	private _isFunctionDefinition: boolean;

	/**
	 * The current Kipper AST node that is being walked through right now. This is the instance where current metadata
	 * should be added to and read from, as this instance will represent and handle the context rules that were walked
	 * through during this operation.
	 */
	private _currentPrimaryNode: CompilableASTNode | undefined;

	/**
	 * The current expression that is being walked through. This is the instance where current metadata
	 * should be added to and read from, as this instance will represent and handle the context rules that were walked
	 * through during this operation.
	 */
	private _currentExpression: Expression | undefined;

	constructor(programCtx: KipperProgramContext, rootNode: CompilationUnitContext) {
		this._rootNode = new RootASTNode(programCtx, rootNode);
		this._isExternalItem = false;
		this._isFunctionDefinition = false;
		this._currentPrimaryNode = undefined;
		this._expressionFactory = new ExpressionASTNodeFactory();
		this._statementFactory = new StatementASTNodeFactory();
		this._declarationFactory = new DeclarationASTNodeFactory();
	}

	/**
	 * The root node of the generated abstract syntax tree.
	 * @since 0.8.0
	 */
	public get rootNode(): RootASTNode {
		return this._rootNode;
	}

	/**
	 * Returns the {@link ExpressionASTNodeFactory expression factory} that is used to create new expression nodes
	 * based on the current Antlr4 context that is being walked through.
	 * @since 0.10.0
	 */
	public get expressionFactory(): ExpressionASTNodeFactory {
		return this._expressionFactory;
	}

	/**
	 * Returns the {@link StatementASTNodeFactory statement factory} that is used to create new statement nodes based on
	 * the current Antlr4 context that is being walked through.
	 * @since 0.10.0
	 */
	public get statementFactory(): StatementASTNodeFactory {
		return this._statementFactory;
	}

	/**
	 * Returns the {@link DeclarationASTNodeFactory declaration factory} that is used to create new declaration nodes
	 * based on the current Antlr4 context that is being walked through.
	 */
	public get declarationFactory(): DeclarationASTNodeFactory {
		return this._declarationFactory;
	}

	/**
	 * Returns which token is being processed at the moment and where meta-data should be assigned to. If
	 * {@link _currentExpression} is defined, then that item will be returned, otherwise {@link _currentPrimaryNode}.
	 * @private
	 */
	private get getCurrentNode(): CompilableASTNode | RootASTNode {
		if (this._currentExpression) {
			return this._currentExpression;
		} else if (this._currentPrimaryNode) {
			return this._currentPrimaryNode;
		} else {
			return this.rootNode;
		}
	}

	/**
	 * Handles an incoming expression context. The handling algorithm is:
	 * - If {@link _currentExpression} is undefined, then it will be created and set as a child of the
	 * {@link _currentPrimaryNode}.
	 * - Otherwise, generate a new {@link Expression} instance, which will be added to the {@link _currentExpression} as
	 * a child. Afterwards {@link _currentExpression} will be set to this new instance, as all new context instances
	 * must be assigned to it. When the context is left, then the old {@link _currentExpression} will be restored as
	 * {@link _currentExpression}, and all further context instances will be assigned to it.
	 * @param ctx The context instance of the expression
	 * @private
	 */
	private handleIncomingExpressionCtx(ctx: ParserExpressionContextType) {
		/* istanbul ignore if: internal errors should rarely happen if ever, and only in very very bad situations */
		if (this.getCurrentNode instanceof RootASTNode) {
			throw new KipperInternalError(
				"An expression may not have the root file token as a parent. It must be child to a statement or a" +
					" definition.",
			);
		}

		this._currentExpression = this.expressionFactory.create(ctx, this.getCurrentNode);
	}

	/**
	 * Handles an exiting expression context. The handling algorithm is:
	 * - If {@link _currentExpression.parent} is of type {@link Expression}, then set {@link _currentExpression} to
	 * that parent.
	 * - Otherwise set {@link _currentExpression} to {@link undefined} again. If  {@link handleIncomingExpressionCtx} is
	 * called again, the {@link _currentExpression} will be defined again and the whole process starts again.
	 * @private
	 */
	private handleExitingExpressionCtx() {
		if (this._currentExpression?.parent instanceof Expression) {
			this._currentExpression = this._currentExpression.parent;
		} else {
			this._currentExpression = undefined;
		}
	}

	/**
	 * Handles an incoming statement context. The handling algorithm is as following:
	 * - If {@link _currentPrimaryNode} is undefined, then it will be created and set as a child of
	 * {@link _rootNode}
	 * - Otherwise, generate a new {@link Statement} instance, which will be added to the {@link _currentPrimaryNode} as
	 * a child. Afterwards {@link _currentPrimaryNode} will be set to this new instance, as all new context instances
	 * must be assigned to it. When the context is left, then the old {@link _currentPrimaryNode} will be restored as
	 * {@link _currentPrimaryNode}, and all further context instances will be assigned to it.
	 * @private
	 */
	private handleIncomingStatementCtx(ctx: ParserStatementContextType) {
		this._currentPrimaryNode = this.statementFactory.create(ctx, this.getCurrentNode);
	}

	/**
	 * Handles an incoming statement context. The handling algorithm is as following:
	 * - If {@link _currentPrimaryNode} is undefined, then it will be created and set as a child of
	 * {@link _rootNode}
	 * - Otherwise, generate a new {@link Declaration} instance, which will be added to the {@link _currentPrimaryNode} as
	 * a child. Afterwards {@link _currentPrimaryNode} will be set to this new instance, as all new context instances
	 * must be assigned to it. When the context is left, then the old {@link _currentPrimaryNode} will be restored as
	 * {@link _currentPrimaryNode}, and all further context instances will be assigned to it.
	 * @private
	 */
	private handleIncomingDeclarationCtx(ctx: ParserDeclarationContextType) {
		this._currentPrimaryNode = this.declarationFactory.create(ctx, this.getCurrentNode);
	}

	/**
	 * Handles an exiting statement or definition context. The handling algorithm is as following:
	 * - If {@link _currentPrimaryNode.parent} is of type {@link _currentPrimaryNode} or {@link Statement}, then set
	 * {@link _currentPrimaryNode} to that parent.
	 * - Otherwise set {@link _currentPrimaryNode} to {@link undefined} again. If
	 * {@link handleExitingStatementOrDefinitionCtx} is called again, the {@link _currentPrimaryNode} will be defined
	 * again and the whole process starts again.
	 * @private
	 */
	private handleExitingStatementOrDefinitionCtx() {
		if (
			this._currentPrimaryNode?.parent instanceof Declaration ||
			this._currentPrimaryNode?.parent instanceof Statement
		) {
			this._currentPrimaryNode = this._currentPrimaryNode.parent;
		} else {
			this._currentPrimaryNode = undefined;
		}
	}

	/**
	 * Function that is called every time an item is entered.
	 * @param ctx The context of the rule
	 */
	public enterEveryRule?(/*@NotNull*/ ctx: ParserRuleContext): void;

	/**
	 * Function that is called every time an item is exited.
	 * @param ctx The context of the rule.
	 */
	public exitEveryRule?(/*@NotNull*/ ctx: ParserRuleContext): void;

	// -------------------------------------------------------------------------------------------------------------------
	//  Root Item section
	// -------------------------------------------------------------------------------------------------------------------

	/**
	 * Enter a parse tree produced by the `externalItem`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterExternalItem(ctx: ExternalItemContext): void {
		this._isExternalItem = true;
	}

	/**
	 * Exit a parse tree produced by the `externalItem`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitExternalItem(ctx: ExternalItemContext): void {
		this._isExternalItem = false;
	}

	// -------------------------------------------------------------------------------------------------------------------
	//  Expression section
	// -------------------------------------------------------------------------------------------------------------------

	/**
	 * Enter a parse tree produced by `KipperParser.identifierPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterIdentifierPrimaryExpression(ctx: IdentifierPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.identifierPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitIdentifierPrimaryExpression(ctx: IdentifierPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.stringPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterStringPrimaryExpression(ctx: StringPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.stringPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitStringPrimaryExpression(ctx: StringPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.fStringPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterFStringPrimaryExpression(ctx: FStringPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.fStringPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitFStringPrimaryExpression(ctx: FStringPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.tangledPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterTangledPrimaryExpression(ctx: TangledPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.tangledPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitTangledPrimaryExpression(ctx: TangledPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.numberPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterNumberPrimaryExpression(ctx: NumberPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.numberPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitNumberPrimaryExpression(ctx: NumberPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.arrayLiteralPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterArrayLiteralPrimaryExpression(ctx: ArrayLiteralPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.arrayLiteralPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitArrayLiteralPrimaryExpression(ctx: ArrayLiteralPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.boolPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterBoolPrimaryExpression(ctx: BoolPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.boolPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitBoolPrimaryExpression(ctx: BoolPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.voidOrNullOrUndefinedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterVoidOrNullOrUndefinedPrimaryExpression(ctx: VoidOrNullOrUndefinedPrimaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.voidOrNullOrUndefinedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitVoidOrNullOrUndefinedPrimaryExpression(ctx: VoidOrNullOrUndefinedPrimaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'computedPrimaryExpression' rule, and only going to handle the rules
	// 'functionCallExpression' and 'memberAccessExpression' as they are the only ones which implements a more precise
	// 'computedPrimaryExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time
	// an expression is called.

	/**
	 * Enter a parse tree produced by the `dotNotationMemberAccessExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	enterDotNotationMemberAccessExpression(ctx: DotNotationMemberAccessExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `dotNotationMemberAccessExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	exitDotNotationMemberAccessExpression(ctx: DotNotationMemberAccessExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by the `bracketNotationMemberAccessExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	enterBracketNotationMemberAccessExpression(ctx: BracketNotationMemberAccessExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `bracketNotationMemberAccessExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	exitBracketNotationMemberAccessExpression(ctx: BracketNotationMemberAccessExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by the `sliceNotationMemberAccessExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext})..
	 */
	enterSliceNotationMemberAccessExpression(ctx: SliceNotationMemberAccessExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `sliceNotationMemberAccessExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	exitSliceNotationMemberAccessExpression(ctx: SliceNotationMemberAccessExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by the `functionCallExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext})..
	 */
	public enterFunctionCallExpression(ctx: FunctionCallExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `functionCallExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext})..
	 */
	public exitFunctionCallExpression(ctx: FunctionCallExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by the `explicitCallFunctionCallExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext})..
	 */
	public enterExplicitCallFunctionCallExpression(ctx: ExplicitCallFunctionCallExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `explicitCallFunctionCallExpression`
	 * Labeled alternative in `KipperParser.computedPrimaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext})..
	 */
	public exitExplicitCallFunctionCallExpression(ctx: ExplicitCallFunctionCallExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'postfixExpression' rule, and only going to handle the rule
	// 'incrementOrDecrementPostfixExpression', which implements a more precise 'postfixExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time
	// an expression is called.

	/**
	 * Enter a parse tree produced by `KipperParser.incrementOrDecrementPostfixExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterIncrementOrDecrementPostfixExpression(ctx: IncrementOrDecrementPostfixExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.incrementOrDecrementPostfixExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitIncrementOrDecrementPostfixExpression(ctx: IncrementOrDecrementPostfixExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'unaryExpression' rule, and only going to handle the rules
	// 'incrementOrDecrementUnaryExpression' and 'operatorModifiedUnaryExpression', which implement a more precise
	// 'unaryExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time
	// an expression is called.

	/**
	 * Enter a parse tree produced by `KipperParser.incrementOrDecrementUnaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterIncrementOrDecrementUnaryExpression(ctx: IncrementOrDecrementUnaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.incrementOrDecrementUnaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitIncrementOrDecrementUnaryExpression(ctx: IncrementOrDecrementUnaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.operatorModifiedUnaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterOperatorModifiedUnaryExpression(ctx: OperatorModifiedUnaryExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.operatorModifiedUnaryExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitOperatorModifiedUnaryExpression(ctx: OperatorModifiedUnaryExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'castOrConvertExpression' rule, and only going to handle the rule
	// 'actualCastOrConvertExpression', which implements a more precise 'castOrConvertExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time
	// an expression is called.

	/**
	 * Enter a parse tree produced by the `actualCastOrConvertExpression`
	 * labeled alternative in `KipperParser.castOrConvertExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualCastOrConvertExpression(ctx: ActualCastOrConvertExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualCastOrConvertExpression`
	 * labeled alternative in `KipperParser.castOrConvertExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualCastOrConvertExpression(ctx: ActualCastOrConvertExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'multiplicativeExpression' rule, and only going to handle the rule
	// 'actualMultiplicativeExpression', which implements a more precise 'multiplicativeExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time
	// an expression is called.

	/**
	 * Enter a parse tree produced by the `actualMultiplicativeExpression`
	 * Labeled alternative in `KipperParser.multiplicativeExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualMultiplicativeExpression(ctx: ActualMultiplicativeExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualMultiplicativeExpression`
	 * Labeled alternative in `KipperParser.multiplicativeExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualMultiplicativeExpression(ctx: ActualMultiplicativeExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'additiveExpression' rule, and only going to handle the rule 'actualAdditiveExpression',
	// which implements a more precise 'additiveExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time
	// an expression is called.

	/**
	 * Enter a parse tree produced by the `actualAdditiveExpression`
	 * labeled alternative in `KipperParser.additiveExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualAdditiveExpression(ctx: ActualAdditiveExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualAdditiveExpression`
	 * labeled alternative in `KipperParser.additiveExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualAdditiveExpression(ctx: ActualAdditiveExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'relationalExpression' rule, and only going to handle the rule
	// 'actualRelationalExpression', which implements a more precise 'relationalExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by the `actualRelationalExpression`
	 * labeled alternative in `KipperParser.relationalExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualRelationalExpression(ctx: ActualRelationalExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualRelationalExpression`
	 * labeled alternative in `KipperParser.relationalExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualRelationalExpression(ctx: ActualRelationalExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'equalityExpression' rule, and only going to handle the rule 'actualEqualityExpression',
	// which implements a more precise 'equalityExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by the `actualEqualityExpression`
	 * labeled alternative in `KipperParser.equalityExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualEqualityExpression(ctx: ActualEqualityExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualEqualityExpression`
	 * labeled alternative in `KipperParser.equalityExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualEqualityExpression(ctx: ActualEqualityExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring logical and expressions, and only going to handle the rules 'passOnLogicalAndExpression',
	// and 'actualLogicalAndExpression', which implement a more precise 'logicalAndExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by `KipperParser.logicalAndExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterLogicalAndExpression?(ctx: LogicalAndExpressionContext): void; // Unspecific parent -> skip

	/**
	 * Exit a parse tree produced by `KipperParser.logicalAndExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitLogicalAndExpression?(ctx: LogicalAndExpressionContext): void; // Unspecific parent -> skip

	/**
	 * Enter a parse tree produced by the `passOnLogicalAndExpression`
	 * Labeled alternative in `KipperParser.logicalAndExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterPassOnLogicalAndExpression?(ctx: PassOnLogicalAndExpressionContext): void; // Pass-on -> skip

	/**
	 * Exit a parse tree produced by the `passOnLogicalAndExpression`
	 * Labeled alternative in `KipperParser.logicalAndExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitPassOnLogicalAndExpression?(ctx: PassOnLogicalAndExpressionContext): void; // Pass-on -> skip

	/**
	 * Enter a parse tree produced by the `actualLogicalAndExpression`
	 * Labeled alternative in `KipperParser.logicalAndExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualLogicalAndExpression(ctx: ActualLogicalAndExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualLogicalAndExpression`
	 * Labeled alternative in `KipperParser.logicalAndExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualLogicalAndExpression(ctx: ActualLogicalAndExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'logicalOrExpression' rule, and only going to handle the rule 'actualLogicalOrExpression',
	// which implements a more precise 'logicalOrExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by the `actualLogicalOrExpression`
	 * Labeled alternative in `KipperParser.logicalOrExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualLogicalOrExpression(ctx: ActualLogicalOrExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualLogicalOrExpression`
	 * Labeled alternative in `KipperParser.logicalOrExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualLogicalOrExpression(ctx: ActualLogicalOrExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'conditionalExpression' rule, and only going to handle the rule
	// 'actualConditionalExpression', which implements a more precise 'conditionalExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by the `actualConditionalExpression`
	 * Labeled alternative in `KipperParser.conditionalExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualConditionalExpression(ctx: ActualConditionalExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualConditionalExpression`
	 * Labeled alternative in `KipperParser.conditionalExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualConditionalExpression(ctx: ActualConditionalExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// NOTE:
	// We are ignoring the 'assignmentExpression' rule, and only going to handle the rule
	// 'actualAssignmentExpression', which implements a more precise 'assignmentExpression' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by the `actualAssignmentExpression`
	 * Labeled alternative in `KipperParser.assignmentExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterActualAssignmentExpression(ctx: ActualAssignmentExpressionContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `actualAssignmentExpression`
	 * Labeled alternative in `KipperParser.assignmentExpression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitActualAssignmentExpression(ctx: ActualAssignmentExpressionContext): void {
		this.handleExitingExpressionCtx();
	}

	// -- NOTE: We are ignoring standard expressions, as the children rules will handle everything. --

	/**
	 * Enter a parse tree produced by `KipperParser.expression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	enterExpression?(ctx: ExpressionContext): void {}

	/**
	 * Exit a parse tree produced by `KipperParser.expression`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	exitExpression?(ctx: ExpressionContext): void {}

	// -------------------------------------------------------------------------------------------------------------------
	//  Statement section
	// -------------------------------------------------------------------------------------------------------------------
	//
	// NOTE:
	// We are ignoring the 'statement' rule, and only going to handle the rules 'expressionStatement', 'labeledStatement'
	// 'selectionStatement', 'iterationStatement' (do-while, while and loop), 'jumpStatement' and 'compoundStatement',
	// which implement a more precise 'statement' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by `KipperParser.expressionStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterExpressionStatement(ctx: ExpressionStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.expressionStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitExpressionStatement(ctx: ExpressionStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.compoundStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterCompoundStatement(ctx: CompoundStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.compoundStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitCompoundStatement(ctx: CompoundStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	// NOTE:
	// We are ignoring the 'selectionStatement' rule, and only going to handle the rules 'ifStatement' and
	// 'switchStatement', which implement a more precise 'selectionStatement' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by the `ifStatement`
	 * labeled alternative in `KipperParser.selectionStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterIfStatement(ctx: IfStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `ifStatement`
	 * labeled alternative in `KipperParser.selectionStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitIfStatement(ctx: IfStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by the `switchStatement`
	 * labeled alternative in `KipperParser.selectionStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterSwitchStatement(ctx: SwitchStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by the `switchStatement`
	 * labeled alternative in `KipperParser.selectionStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitSwitchStatement(ctx: SwitchStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.labeledStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterSwitchLabeledStatement(ctx: SwitchLabeledStatementContext): void {
		// TODO! Implement switch statements
	}

	/**
	 * Exit a parse tree produced by `KipperParser.labeledStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitSwitchLabeledStatement(ctx: SwitchLabeledStatementContext): void {
		// TODO! Implement switch statements
	}

	// NOTE:
	// We are ignoring the 'iterationStatement' rule, and only going to handle the rules 'forLoopIterationStatement',
	// 'whileLoopIterationStatement' and 'doWhileLoopIterationStatement', which implement a more precise
	// 'iterationStatement' rule.
	//
	// This is to simplify the walking process, without having to check if the expression is actually used every time an
	// expression is called.

	/**
	 * Enter a parse tree produced by `KipperParser.forLoopIterationStatement`.
	 * @param ctx the parse tree
	 */
	public enterForLoopIterationStatement(ctx: ForLoopIterationStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.forLoopIterationStatement`.
	 * @param ctx the parse tree
	 */
	public exitForLoopIterationStatement(ctx: ForLoopIterationStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.whileLoopIterationStatement`.
	 * @param ctx the parse tree
	 */
	public enterWhileLoopIterationStatement(ctx: WhileLoopIterationStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.whileLoopIterationStatement`.
	 * @param ctx the parse tree
	 */
	public exitWhileLoopIterationStatement(ctx: WhileLoopIterationStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.doWhileLoopIterationStatement`.
	 * @param ctx the parse tree
	 */
	public enterDoWhileLoopIterationStatement(ctx: DoWhileLoopIterationStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.doWhileLoopIterationStatement`.
	 * @param ctx the parse tree
	 */
	public exitDoWhileLoopIterationStatement(ctx: DoWhileLoopIterationStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	// -- Special statements

	/**
	 * Enter a parse tree produced by `KipperParser.returnStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterReturnStatement(ctx: ReturnStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.returnStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitReturnStatement(ctx: ReturnStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.jumpStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterJumpStatement(ctx: JumpStatementContext): void {
		this.handleIncomingStatementCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.jumpStatement`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitJumpStatement(ctx: JumpStatementContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	// -------------------------------------------------------------------------------------------------------------------
	//  Declaration section
	// -------------------------------------------------------------------------------------------------------------------

	/**
	 * Enter a parse tree produced by `KipperParser.declaration`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterDeclaration?(ctx: DeclarationContext): void;

	/**
	 * Exit a parse tree produced by `KipperParser.declaration`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitDeclaration?(ctx: DeclarationContext): void;

	/**
	 * Enter a parse tree produced by `KipperParser.variableDeclaration`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterVariableDeclaration(ctx: VariableDeclarationContext): void {
		this.handleIncomingDeclarationCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.variableDeclaration`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitVariableDeclaration(ctx: VariableDeclarationContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.functionDefinition`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterFunctionDeclaration(ctx: FunctionDeclarationContext): void {
		this.handleIncomingDeclarationCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.functionDefinition`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitFunctionDeclaration(ctx: FunctionDeclarationContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.parameterDeclaration`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterParameterDeclaration(ctx: ParameterDeclarationContext): void {
		this.handleIncomingDeclarationCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.parameterDeclaration`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitParameterDeclaration(ctx: ParameterDeclarationContext): void {
		this.handleExitingStatementOrDefinitionCtx();
	}

	// -------------------------------------------------------------------------------------------------------------------
	//  Other
	// -------------------------------------------------------------------------------------------------------------------

	/**
	 * Enter a parse tree produced by `KipperParser.storageTypeSpecifier`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterStorageTypeSpecifier?(ctx: StorageTypeSpecifierContext): void;

	/**
	 * Exit a parse tree produced by `KipperParser.storageTypeSpecifier`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitStorageTypeSpecifier?(ctx: StorageTypeSpecifierContext): void;

	/**
	 * Enter a parse tree produced by `KipperParser.initDeclarator`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterInitDeclarator?(ctx: InitDeclaratorContext): void;

	/**
	 * Exit a parse tree produced by `KipperParser.initDeclarator`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitInitDeclarator?(ctx: InitDeclaratorContext): void;

	/**
	 * Enter a parse tree produced by `KipperParser.identifierTypeSpecifier`.
	 * @param ctx the parse tree
	 */
	public enterIdentifierTypeSpecifier(ctx: IdentifierTypeSpecifierContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.identifierTypeSpecifier`.
	 * @param ctx the parse tree
	 */
	public exitIdentifierTypeSpecifier(ctx: IdentifierTypeSpecifierContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.genericTypeSpecifier`.
	 * @param ctx the parse tree
	 */
	public enterGenericTypeSpecifier(ctx: GenericTypeSpecifierContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.genericTypeSpecifier`.
	 * @param ctx the parse tree
	 */
	public exitGenericTypeSpecifier(ctx: GenericTypeSpecifierContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.typeofTypeSpecifier`.
	 * @param ctx the parse tree
	 */
	public enterTypeofTypeSpecifier(ctx: TypeofTypeSpecifierContext): void {
		this.handleIncomingExpressionCtx(ctx);
	}

	/**
	 * Exit a parse tree produced by `KipperParser.typeofTypeSpecifier`.
	 * @param ctx the parse tree
	 */
	public exitTypeofTypeSpecifier(ctx: TypeofTypeSpecifierContext): void {
		this.handleExitingExpressionCtx();
	}

	/**
	 * Enter a parse tree produced by `KipperParser.typeSpecifier`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterTypeSpecifier?(ctx: TypeSpecifierContext): void;

	/**
	 * Exit a parse tree produced by `KipperParser.typeSpecifier`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitTypeSpecifier?(ctx: TypeSpecifierContext): void;

	/**
	 * Enter a parse tree produced by `KipperParser.declarator`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterDeclarator?(ctx: DeclaratorContext): void;

	/**
	 * Exit a parse tree produced by `KipperParser.declarator`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitDeclarator?(ctx: DeclaratorContext): void;

	/**
	 * Enter a parse tree produced by `KipperParser.directDeclarator`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterDirectDeclarator?(ctx: DirectDeclaratorContext): void;

	/**
	 * Exit a parse tree produced by `KipperParser.directDeclarator`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitDirectDeclarator?(ctx: DirectDeclaratorContext): void;

	/**
	 * Enter a parse tree produced by `KipperParser.parameterList`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterParameterList?(ctx: ParameterListContext): void; // Unspecific parent -> skip

	/**
	 * Exit a parse tree produced by `KipperParser.parameterList`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitParameterList?(ctx: ParameterListContext): void; // Unspecific parent -> skip

	/**
	 * Enter a parse tree produced by `KipperParser.initializer`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public enterInitializer?(ctx: InitializerContext): void; // Unspecific parent -> skip

	/**
	 * Exit a parse tree produced by `KipperParser.initializer`.
	 * @param ctx The parse tree (instance of {@link ParserRuleContext}).
	 */
	public exitInitializer?(ctx: InitializerContext): void; // Unspecific parent -> skip
}
