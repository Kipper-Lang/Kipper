(function() {
    function a(e) {
        "use strict";
        var r = {
            omitExtraWLInCodeBlocks: {
                defaultValue: !1,
                describe: "Omit the default extra whiteline added to code blocks",
                type: "boolean"
            },
            noHeaderId: {
                defaultValue: !1,
                describe: "Turn on/off generated header id",
                type: "boolean"
            },
            prefixHeaderId: {
                defaultValue: !1,
                describe: "Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",
                type: "string"
            },
            rawPrefixHeaderId: {
                defaultValue: !1,
                describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
                type: "boolean"
            },
            ghCompatibleHeaderId: {
                defaultValue: !1,
                describe: "Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",
                type: "boolean"
            },
            rawHeaderId: {
                defaultValue: !1,
                describe: "Remove only spaces, ' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids",
                type: "boolean"
            },
            headerLevelStart: {
                defaultValue: !1,
                describe: "The header blocks level start",
                type: "integer"
            },
            parseImgDimensions: {
                defaultValue: !1,
                describe: "Turn on/off image dimension parsing",
                type: "boolean"
            },
            simplifiedAutoLink: {
                defaultValue: !1,
                describe: "Turn on/off GFM autolink style",
                type: "boolean"
            },
            excludeTrailingPunctuationFromURLs: {
                defaultValue: !1,
                describe: "Excludes trailing punctuation from links generated with autoLinking",
                type: "boolean"
            },
            literalMidWordUnderscores: {
                defaultValue: !1,
                describe: "Parse midword underscores as literal underscores",
                type: "boolean"
            },
            literalMidWordAsterisks: {
                defaultValue: !1,
                describe: "Parse midword asterisks as literal asterisks",
                type: "boolean"
            },
            strikethrough: {
                defaultValue: !1,
                describe: "Turn on/off strikethrough support",
                type: "boolean"
            },
            tables: {
                defaultValue: !1,
                describe: "Turn on/off tables support",
                type: "boolean"
            },
            tablesHeaderId: {
                defaultValue: !1,
                describe: "Add an id to table headers",
                type: "boolean"
            },
            ghCodeBlocks: {
                defaultValue: !0,
                describe: "Turn on/off GFM fenced code blocks support",
                type: "boolean"
            },
            tasklists: {
                defaultValue: !1,
                describe: "Turn on/off GFM tasklist support",
                type: "boolean"
            },
            smoothLivePreview: {
                defaultValue: !1,
                describe: "Prevents weird effects in live previews due to incomplete input",
                type: "boolean"
            },
            smartIndentationFix: {
                defaultValue: !1,
                describe: "Tries to smartly fix indentation in es6 strings",
                type: "boolean"
            },
            disableForced4SpacesIndentedSublists: {
                defaultValue: !1,
                describe: "Disables the requirement of indenting nested sublists by 4 spaces",
                type: "boolean"
            },
            simpleLineBreaks: {
                defaultValue: !1,
                describe: "Parses simple line breaks as <br> (GFM Style)",
                type: "boolean"
            },
            requireSpaceBeforeHeadingText: {
                defaultValue: !1,
                describe: "Makes adding a space between `#` and the header text mandatory (GFM Style)",
                type: "boolean"
            },
            ghMentions: {
                defaultValue: !1,
                describe: "Enables github @mentions",
                type: "boolean"
            },
            ghMentionsLink: {
                defaultValue: "https://github.com/{u}",
                describe: "Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",
                type: "string"
            },
            encodeEmails: {
                defaultValue: !0,
                describe: "Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",
                type: "boolean"
            },
            openLinksInNewWindow: {
                defaultValue: !1,
                describe: "Open all links in new windows",
                type: "boolean"
            },
            backslashEscapesHTMLTags: {
                defaultValue: !1,
                describe: "Support for HTML Tag escaping. ex: <div>foo</div>",
                type: "boolean"
            },
            emoji: {
                defaultValue: !1,
                describe: "Enable emoji support. Ex: `this is a :smile: emoji`",
                type: "boolean"
            },
            underline: {
                defaultValue: !1,
                describe: "Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",
                type: "boolean"
            },
            ellipsis: {
                defaultValue: !0,
                describe: "Replaces three dots with the ellipsis unicode character",
                type: "boolean"
            },
            completeHTMLDocument: {
                defaultValue: !1,
                describe: "Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",
                type: "boolean"
            },
            metadata: {
                defaultValue: !1,
                describe: "Enable support for document metadata (defined at the top of the document between `\xab\xab\xab` and `\xbb\xbb\xbb` or between `---` and `---`).",
                type: "boolean"
            },
            splitAdjacentBlockquotes: {
                defaultValue: !1,
                describe: "Split adjacent blockquote blocks",
                type: "boolean"
            }
        };
        if (!1 === e) return JSON.parse(JSON.stringify(r));
        var t, a = {};
        for(t in r)r.hasOwnProperty(t) && (a[t] = r[t].defaultValue);
        return a;
    }
    var x = {}, t = {}, d = {}, p = a(!0), h = "vanilla", _ = {
        github: {
            omitExtraWLInCodeBlocks: !0,
            simplifiedAutoLink: !0,
            excludeTrailingPunctuationFromURLs: !0,
            literalMidWordUnderscores: !0,
            strikethrough: !0,
            tables: !0,
            tablesHeaderId: !0,
            ghCodeBlocks: !0,
            tasklists: !0,
            disableForced4SpacesIndentedSublists: !0,
            simpleLineBreaks: !0,
            requireSpaceBeforeHeadingText: !0,
            ghCompatibleHeaderId: !0,
            ghMentions: !0,
            backslashEscapesHTMLTags: !0,
            emoji: !0,
            splitAdjacentBlockquotes: !0
        },
        original: {
            noHeaderId: !0,
            ghCodeBlocks: !1
        },
        ghost: {
            omitExtraWLInCodeBlocks: !0,
            parseImgDimensions: !0,
            simplifiedAutoLink: !0,
            excludeTrailingPunctuationFromURLs: !0,
            literalMidWordUnderscores: !0,
            strikethrough: !0,
            tables: !0,
            tablesHeaderId: !0,
            ghCodeBlocks: !0,
            tasklists: !0,
            smoothLivePreview: !0,
            simpleLineBreaks: !0,
            requireSpaceBeforeHeadingText: !0,
            ghMentions: !1,
            encodeEmails: !0
        },
        vanilla: a(!0),
        allOn: function() {
            "use strict";
            var e, r = a(!0), t = {};
            for(e in r)r.hasOwnProperty(e) && (t[e] = !0);
            return t;
        }()
    };
    function g(e, r) {
        "use strict";
        var t = r ? "Error in " + r + " extension->" : "Error in unnamed extension", a = {
            valid: !0,
            error: ""
        };
        x.helper.isArray(e) || (e = [
            e
        ]);
        for(var n = 0; n < e.length; ++n){
            var s = t + " sub-extension " + n + ": ", o = e[n];
            if ("object" != typeof o) return a.valid = !1, a.error = s + "must be an object, but " + typeof o + " given", a;
            if (!x.helper.isString(o.type)) return a.valid = !1, a.error = s + 'property "type" must be a string, but ' + typeof o.type + " given", a;
            var i = o.type = o.type.toLowerCase();
            if ("lang" !== (i = "html" === (i = "language" === i ? o.type = "lang" : i) ? o.type = "output" : i) && "output" !== i && "listener" !== i) return a.valid = !1, a.error = s + "type " + i + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"', a;
            if ("listener" === i) {
                if (x.helper.isUndefined(o.listeners)) return a.valid = !1, a.error = s + '. Extensions of type "listener" must have a property called "listeners"', a;
            } else if (x.helper.isUndefined(o.filter) && x.helper.isUndefined(o.regex)) return a.valid = !1, a.error = s + i + ' extensions must define either a "regex" property or a "filter" method', a;
            if (o.listeners) {
                if ("object" != typeof o.listeners) return a.valid = !1, a.error = s + '"listeners" property must be an object but ' + typeof o.listeners + " given", a;
                for(var l in o.listeners)if (o.listeners.hasOwnProperty(l) && "function" != typeof o.listeners[l]) return a.valid = !1, a.error = s + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + l + " must be a function but " + typeof o.listeners[l] + " given", a;
            }
            if (o.filter) {
                if ("function" != typeof o.filter) return a.valid = !1, a.error = s + '"filter" must be a function, but ' + typeof o.filter + " given", a;
            } else if (o.regex) {
                if (x.helper.isString(o.regex) && (o.regex = new RegExp(o.regex, "g")), !(o.regex instanceof RegExp)) return a.valid = !1, a.error = s + '"regex" property must either be a string or a RegExp object, but ' + typeof o.regex + " given", a;
                if (x.helper.isUndefined(o.replace)) return a.valid = !1, a.error = s + '"regex" extensions must implement a replace string or function', a;
            }
        }
        return a;
    }
    function n(e, r) {
        "use strict";
        return "\xa8E" + r.charCodeAt(0) + "E";
    }
    x.helper = {}, x.extensions = {}, x.setOption = function(e, r) {
        "use strict";
        return p[e] = r, this;
    }, x.getOption = function(e) {
        "use strict";
        return p[e];
    }, x.getOptions = function() {
        "use strict";
        return p;
    }, x.resetOptions = function() {
        "use strict";
        p = a(!0);
    }, x.setFlavor = function(e) {
        "use strict";
        if (!_.hasOwnProperty(e)) throw Error(e + " flavor was not found");
        x.resetOptions();
        var r, t = _[e];
        for(r in h = e, t)t.hasOwnProperty(r) && (p[r] = t[r]);
    }, x.getFlavor = function() {
        "use strict";
        return h;
    }, x.getFlavorOptions = function(e) {
        "use strict";
        if (_.hasOwnProperty(e)) return _[e];
    }, x.getDefaultOptions = a, x.subParser = function(e, r) {
        "use strict";
        if (x.helper.isString(e)) {
            if (void 0 === r) {
                if (t.hasOwnProperty(e)) return t[e];
                throw Error("SubParser named " + e + " not registered!");
            }
            t[e] = r;
        }
    }, x.extension = function(e, r) {
        "use strict";
        if (!x.helper.isString(e)) throw Error("Extension 'name' must be a string");
        if (e = x.helper.stdExtName(e), x.helper.isUndefined(r)) {
            if (d.hasOwnProperty(e)) return d[e];
            throw Error("Extension named " + e + " is not registered!");
        }
        "function" == typeof r && (r = r());
        var t = g(r = x.helper.isArray(r) ? r : [
            r
        ], e);
        if (!t.valid) throw Error(t.error);
        d[e] = r;
    }, x.getAllExtensions = function() {
        "use strict";
        return d;
    }, x.removeExtension = function(e) {
        "use strict";
        delete d[e];
    }, x.resetExtensions = function() {
        "use strict";
        d = {};
    }, x.validateExtension = function(e) {
        "use strict";
        e = g(e, null);
        return !!e.valid || (console.warn(e.error), !1);
    }, x.hasOwnProperty("helper") || (x.helper = {}), x.helper.isString = function(e) {
        "use strict";
        return "string" == typeof e || e instanceof String;
    }, x.helper.isFunction = function(e) {
        "use strict";
        return e && "[object Function]" === ({}).toString.call(e);
    }, x.helper.isArray = function(e) {
        "use strict";
        return Array.isArray(e);
    }, x.helper.isUndefined = function(e) {
        "use strict";
        return void 0 === e;
    }, x.helper.forEach = function(e, r) {
        "use strict";
        if (x.helper.isUndefined(e)) throw new Error("obj param is required");
        if (x.helper.isUndefined(r)) throw new Error("callback param is required");
        if (!x.helper.isFunction(r)) throw new Error("callback param must be a function/closure");
        if ("function" == typeof e.forEach) e.forEach(r);
        else if (x.helper.isArray(e)) for(var t = 0; t < e.length; t++)r(e[t], t, e);
        else {
            if ("object" != typeof e) throw new Error("obj does not seem to be an array or an iterable object");
            for(var a in e)e.hasOwnProperty(a) && r(e[a], a, e);
        }
    }, x.helper.stdExtName = function(e) {
        "use strict";
        return e.replace(/[_?*+\/\\.^-]/g, "").replace(/\s/g, "").toLowerCase();
    }, x.helper.escapeCharactersCallback = n, x.helper.escapeCharacters = function(e, r, t) {
        "use strict";
        r = "([" + r.replace(/([\[\]\\])/g, "\\$1") + "])", t && (r = "\\\\" + r), t = new RegExp(r, "g");
        return e = e.replace(t, n);
    }, x.helper.unescapeHTMLEntities = function(e) {
        "use strict";
        return e.replace(/&quot;/g, '"').replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
    };
    function u(e, r, t, a) {
        "use strict";
        var n, s, o, i = -1 < (a = a || "").indexOf("g"), l = new RegExp(r + "|" + t, "g" + a.replace(/g/g, "")), c = new RegExp(r, a.replace(/g/g, "")), u = [];
        do {
            for(n = 0; p = l.exec(e);)if (c.test(p[0])) n++ || (o = (s = l.lastIndex) - p[0].length);
            else if (n && !--n) {
                var d = p.index + p[0].length, p = {
                    left: {
                        start: o,
                        end: s
                    },
                    match: {
                        start: s,
                        end: p.index
                    },
                    right: {
                        start: p.index,
                        end: d
                    },
                    wholeMatch: {
                        start: o,
                        end: d
                    }
                };
                if (u.push(p), !i) return u;
            }
        }while (n && (l.lastIndex = s));
        return u;
    }
    function s(u) {
        "use strict";
        return function(e, r, t, a, n, s, o) {
            var i = t = t.replace(x.helper.regexes.asteriskDashAndColon, x.helper.escapeCharactersCallback), l = "", c = "", r = r || "", o = o || "";
            return /^www\./i.test(t) && (t = t.replace(/^www\./i, "http://www.")), u.excludeTrailingPunctuationFromURLs && s && (l = s), r + '<a href="' + t + '"' + (c = u.openLinksInNewWindow ? ' rel="noopener noreferrer" target="\xa8E95Eblank"' : c) + ">" + i + "</a>" + l + o;
        };
    }
    function o(n, s) {
        "use strict";
        return function(e, r, t) {
            var a = "mailto:";
            return r = r || "", t = x.subParser("unescapeSpecialChars")(t, n, s), n.encodeEmails ? (a = x.helper.encodeEmailAddress(a + t), t = x.helper.encodeEmailAddress(t)) : a += t, r + '<a href="' + a + '">' + t + "</a>";
        };
    }
    x.helper.matchRecursiveRegExp = function(e, r, t, a) {
        "use strict";
        for(var n = u(e, r, t, a), s = [], o = 0; o < n.length; ++o)s.push([
            e.slice(n[o].wholeMatch.start, n[o].wholeMatch.end),
            e.slice(n[o].match.start, n[o].match.end),
            e.slice(n[o].left.start, n[o].left.end),
            e.slice(n[o].right.start, n[o].right.end)
        ]);
        return s;
    }, x.helper.replaceRecursiveRegExp = function(e, r, t, a, n) {
        "use strict";
        x.helper.isFunction(r) || (s = r, r = function() {
            return s;
        });
        var s, o = u(e, t, a, n), t = e, i = o.length;
        if (0 < i) {
            var l = [];
            0 !== o[0].wholeMatch.start && l.push(e.slice(0, o[0].wholeMatch.start));
            for(var c = 0; c < i; ++c)l.push(r(e.slice(o[c].wholeMatch.start, o[c].wholeMatch.end), e.slice(o[c].match.start, o[c].match.end), e.slice(o[c].left.start, o[c].left.end), e.slice(o[c].right.start, o[c].right.end))), c < i - 1 && l.push(e.slice(o[c].wholeMatch.end, o[c + 1].wholeMatch.start));
            o[i - 1].wholeMatch.end < e.length && l.push(e.slice(o[i - 1].wholeMatch.end)), t = l.join("");
        }
        return t;
    }, x.helper.regexIndexOf = function(e, r, t) {
        "use strict";
        if (!x.helper.isString(e)) throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
        if (r instanceof RegExp == !1) throw "InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";
        e = e.substring(t || 0).search(r);
        return 0 <= e ? e + (t || 0) : e;
    }, x.helper.splitAtIndex = function(e, r) {
        "use strict";
        if (x.helper.isString(e)) return [
            e.substring(0, r),
            e.substring(r)
        ];
        throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
    }, x.helper.encodeEmailAddress = function(e) {
        "use strict";
        var t = [
            function(e) {
                return "&#" + e.charCodeAt(0) + ";";
            },
            function(e) {
                return "&#x" + e.charCodeAt(0).toString(16) + ";";
            },
            function(e) {
                return e;
            }
        ];
        return e = e.replace(/./g, function(e) {
            var r;
            return e = "@" === e ? t[Math.floor(2 * Math.random())](e) : .9 < (r = Math.random()) ? t[2](e) : .45 < r ? t[1](e) : t[0](e);
        });
    }, x.helper.padEnd = function(e, r, t) {
        "use strict";
        return r >>= 0, t = String(t || " "), e.length > r ? String(e) : ((r -= e.length) > t.length && (t += t.repeat(r / t.length)), String(e) + t.slice(0, r));
    }, "undefined" == typeof console && (console = {
        warn: function(e) {
            "use strict";
            alert(e);
        },
        log: function(e) {
            "use strict";
            alert(e);
        },
        error: function(e) {
            "use strict";
            throw e;
        }
    }), x.helper.regexes = {
        asteriskDashAndColon: /([*_:~])/g
    }, x.helper.emojis = {
        "+1": "\uD83D\uDC4D",
        "-1": "\uD83D\uDC4E",
        100: "\uD83D\uDCAF",
        1234: "\uD83D\uDD22",
        "1st_place_medal": "\uD83E\uDD47",
        "2nd_place_medal": "\uD83E\uDD48",
        "3rd_place_medal": "\uD83E\uDD49",
        "8ball": "\uD83C\uDFB1",
        a: "\uD83C\uDD70\uFE0F",
        ab: "\uD83C\uDD8E",
        abc: "\uD83D\uDD24",
        abcd: "\uD83D\uDD21",
        accept: "\uD83C\uDE51",
        aerial_tramway: "\uD83D\uDEA1",
        airplane: "\u2708\uFE0F",
        alarm_clock: "\u23F0",
        alembic: "\u2697\uFE0F",
        alien: "\uD83D\uDC7D",
        ambulance: "\uD83D\uDE91",
        amphora: "\uD83C\uDFFA",
        anchor: "\u2693\uFE0F",
        angel: "\uD83D\uDC7C",
        anger: "\uD83D\uDCA2",
        angry: "\uD83D\uDE20",
        anguished: "\uD83D\uDE27",
        ant: "\uD83D\uDC1C",
        apple: "\uD83C\uDF4E",
        aquarius: "\u2652\uFE0F",
        aries: "\u2648\uFE0F",
        arrow_backward: "\u25C0\uFE0F",
        arrow_double_down: "\u23EC",
        arrow_double_up: "\u23EB",
        arrow_down: "\u2B07\uFE0F",
        arrow_down_small: "\uD83D\uDD3D",
        arrow_forward: "\u25B6\uFE0F",
        arrow_heading_down: "\u2935\uFE0F",
        arrow_heading_up: "\u2934\uFE0F",
        arrow_left: "\u2B05\uFE0F",
        arrow_lower_left: "\u2199\uFE0F",
        arrow_lower_right: "\u2198\uFE0F",
        arrow_right: "\u27A1\uFE0F",
        arrow_right_hook: "\u21AA\uFE0F",
        arrow_up: "\u2B06\uFE0F",
        arrow_up_down: "\u2195\uFE0F",
        arrow_up_small: "\uD83D\uDD3C",
        arrow_upper_left: "\u2196\uFE0F",
        arrow_upper_right: "\u2197\uFE0F",
        arrows_clockwise: "\uD83D\uDD03",
        arrows_counterclockwise: "\uD83D\uDD04",
        art: "\uD83C\uDFA8",
        articulated_lorry: "\uD83D\uDE9B",
        artificial_satellite: "\uD83D\uDEF0",
        astonished: "\uD83D\uDE32",
        athletic_shoe: "\uD83D\uDC5F",
        atm: "\uD83C\uDFE7",
        atom_symbol: "\u269B\uFE0F",
        avocado: "\uD83E\uDD51",
        b: "\uD83C\uDD71\uFE0F",
        baby: "\uD83D\uDC76",
        baby_bottle: "\uD83C\uDF7C",
        baby_chick: "\uD83D\uDC24",
        baby_symbol: "\uD83D\uDEBC",
        back: "\uD83D\uDD19",
        bacon: "\uD83E\uDD53",
        badminton: "\uD83C\uDFF8",
        baggage_claim: "\uD83D\uDEC4",
        baguette_bread: "\uD83E\uDD56",
        balance_scale: "\u2696\uFE0F",
        balloon: "\uD83C\uDF88",
        ballot_box: "\uD83D\uDDF3",
        ballot_box_with_check: "\u2611\uFE0F",
        bamboo: "\uD83C\uDF8D",
        banana: "\uD83C\uDF4C",
        bangbang: "\u203C\uFE0F",
        bank: "\uD83C\uDFE6",
        bar_chart: "\uD83D\uDCCA",
        barber: "\uD83D\uDC88",
        baseball: "\u26BE\uFE0F",
        basketball: "\uD83C\uDFC0",
        basketball_man: "\u26F9\uFE0F",
        basketball_woman: "\u26F9\uFE0F&zwj;\u2640\uFE0F",
        bat: "\uD83E\uDD87",
        bath: "\uD83D\uDEC0",
        bathtub: "\uD83D\uDEC1",
        battery: "\uD83D\uDD0B",
        beach_umbrella: "\uD83C\uDFD6",
        bear: "\uD83D\uDC3B",
        bed: "\uD83D\uDECF",
        bee: "\uD83D\uDC1D",
        beer: "\uD83C\uDF7A",
        beers: "\uD83C\uDF7B",
        beetle: "\uD83D\uDC1E",
        beginner: "\uD83D\uDD30",
        bell: "\uD83D\uDD14",
        bellhop_bell: "\uD83D\uDECE",
        bento: "\uD83C\uDF71",
        biking_man: "\uD83D\uDEB4",
        bike: "\uD83D\uDEB2",
        biking_woman: "\uD83D\uDEB4&zwj;\u2640\uFE0F",
        bikini: "\uD83D\uDC59",
        biohazard: "\u2623\uFE0F",
        bird: "\uD83D\uDC26",
        birthday: "\uD83C\uDF82",
        black_circle: "\u26AB\uFE0F",
        black_flag: "\uD83C\uDFF4",
        black_heart: "\uD83D\uDDA4",
        black_joker: "\uD83C\uDCCF",
        black_large_square: "\u2B1B\uFE0F",
        black_medium_small_square: "\u25FE\uFE0F",
        black_medium_square: "\u25FC\uFE0F",
        black_nib: "\u2712\uFE0F",
        black_small_square: "\u25AA\uFE0F",
        black_square_button: "\uD83D\uDD32",
        blonde_man: "\uD83D\uDC71",
        blonde_woman: "\uD83D\uDC71&zwj;\u2640\uFE0F",
        blossom: "\uD83C\uDF3C",
        blowfish: "\uD83D\uDC21",
        blue_book: "\uD83D\uDCD8",
        blue_car: "\uD83D\uDE99",
        blue_heart: "\uD83D\uDC99",
        blush: "\uD83D\uDE0A",
        boar: "\uD83D\uDC17",
        boat: "\u26F5\uFE0F",
        bomb: "\uD83D\uDCA3",
        book: "\uD83D\uDCD6",
        bookmark: "\uD83D\uDD16",
        bookmark_tabs: "\uD83D\uDCD1",
        books: "\uD83D\uDCDA",
        boom: "\uD83D\uDCA5",
        boot: "\uD83D\uDC62",
        bouquet: "\uD83D\uDC90",
        bowing_man: "\uD83D\uDE47",
        bow_and_arrow: "\uD83C\uDFF9",
        bowing_woman: "\uD83D\uDE47&zwj;\u2640\uFE0F",
        bowling: "\uD83C\uDFB3",
        boxing_glove: "\uD83E\uDD4A",
        boy: "\uD83D\uDC66",
        bread: "\uD83C\uDF5E",
        bride_with_veil: "\uD83D\uDC70",
        bridge_at_night: "\uD83C\uDF09",
        briefcase: "\uD83D\uDCBC",
        broken_heart: "\uD83D\uDC94",
        bug: "\uD83D\uDC1B",
        building_construction: "\uD83C\uDFD7",
        bulb: "\uD83D\uDCA1",
        bullettrain_front: "\uD83D\uDE85",
        bullettrain_side: "\uD83D\uDE84",
        burrito: "\uD83C\uDF2F",
        bus: "\uD83D\uDE8C",
        business_suit_levitating: "\uD83D\uDD74",
        busstop: "\uD83D\uDE8F",
        bust_in_silhouette: "\uD83D\uDC64",
        busts_in_silhouette: "\uD83D\uDC65",
        butterfly: "\uD83E\uDD8B",
        cactus: "\uD83C\uDF35",
        cake: "\uD83C\uDF70",
        calendar: "\uD83D\uDCC6",
        call_me_hand: "\uD83E\uDD19",
        calling: "\uD83D\uDCF2",
        camel: "\uD83D\uDC2B",
        camera: "\uD83D\uDCF7",
        camera_flash: "\uD83D\uDCF8",
        camping: "\uD83C\uDFD5",
        cancer: "\u264B\uFE0F",
        candle: "\uD83D\uDD6F",
        candy: "\uD83C\uDF6C",
        canoe: "\uD83D\uDEF6",
        capital_abcd: "\uD83D\uDD20",
        capricorn: "\u2651\uFE0F",
        car: "\uD83D\uDE97",
        card_file_box: "\uD83D\uDDC3",
        card_index: "\uD83D\uDCC7",
        card_index_dividers: "\uD83D\uDDC2",
        carousel_horse: "\uD83C\uDFA0",
        carrot: "\uD83E\uDD55",
        cat: "\uD83D\uDC31",
        cat2: "\uD83D\uDC08",
        cd: "\uD83D\uDCBF",
        chains: "\u26D3",
        champagne: "\uD83C\uDF7E",
        chart: "\uD83D\uDCB9",
        chart_with_downwards_trend: "\uD83D\uDCC9",
        chart_with_upwards_trend: "\uD83D\uDCC8",
        checkered_flag: "\uD83C\uDFC1",
        cheese: "\uD83E\uDDC0",
        cherries: "\uD83C\uDF52",
        cherry_blossom: "\uD83C\uDF38",
        chestnut: "\uD83C\uDF30",
        chicken: "\uD83D\uDC14",
        children_crossing: "\uD83D\uDEB8",
        chipmunk: "\uD83D\uDC3F",
        chocolate_bar: "\uD83C\uDF6B",
        christmas_tree: "\uD83C\uDF84",
        church: "\u26EA\uFE0F",
        cinema: "\uD83C\uDFA6",
        circus_tent: "\uD83C\uDFAA",
        city_sunrise: "\uD83C\uDF07",
        city_sunset: "\uD83C\uDF06",
        cityscape: "\uD83C\uDFD9",
        cl: "\uD83C\uDD91",
        clamp: "\uD83D\uDDDC",
        clap: "\uD83D\uDC4F",
        clapper: "\uD83C\uDFAC",
        classical_building: "\uD83C\uDFDB",
        clinking_glasses: "\uD83E\uDD42",
        clipboard: "\uD83D\uDCCB",
        clock1: "\uD83D\uDD50",
        clock10: "\uD83D\uDD59",
        clock1030: "\uD83D\uDD65",
        clock11: "\uD83D\uDD5A",
        clock1130: "\uD83D\uDD66",
        clock12: "\uD83D\uDD5B",
        clock1230: "\uD83D\uDD67",
        clock130: "\uD83D\uDD5C",
        clock2: "\uD83D\uDD51",
        clock230: "\uD83D\uDD5D",
        clock3: "\uD83D\uDD52",
        clock330: "\uD83D\uDD5E",
        clock4: "\uD83D\uDD53",
        clock430: "\uD83D\uDD5F",
        clock5: "\uD83D\uDD54",
        clock530: "\uD83D\uDD60",
        clock6: "\uD83D\uDD55",
        clock630: "\uD83D\uDD61",
        clock7: "\uD83D\uDD56",
        clock730: "\uD83D\uDD62",
        clock8: "\uD83D\uDD57",
        clock830: "\uD83D\uDD63",
        clock9: "\uD83D\uDD58",
        clock930: "\uD83D\uDD64",
        closed_book: "\uD83D\uDCD5",
        closed_lock_with_key: "\uD83D\uDD10",
        closed_umbrella: "\uD83C\uDF02",
        cloud: "\u2601\uFE0F",
        cloud_with_lightning: "\uD83C\uDF29",
        cloud_with_lightning_and_rain: "\u26C8",
        cloud_with_rain: "\uD83C\uDF27",
        cloud_with_snow: "\uD83C\uDF28",
        clown_face: "\uD83E\uDD21",
        clubs: "\u2663\uFE0F",
        cocktail: "\uD83C\uDF78",
        coffee: "\u2615\uFE0F",
        coffin: "\u26B0\uFE0F",
        cold_sweat: "\uD83D\uDE30",
        comet: "\u2604\uFE0F",
        computer: "\uD83D\uDCBB",
        computer_mouse: "\uD83D\uDDB1",
        confetti_ball: "\uD83C\uDF8A",
        confounded: "\uD83D\uDE16",
        confused: "\uD83D\uDE15",
        congratulations: "\u3297\uFE0F",
        construction: "\uD83D\uDEA7",
        construction_worker_man: "\uD83D\uDC77",
        construction_worker_woman: "\uD83D\uDC77&zwj;\u2640\uFE0F",
        control_knobs: "\uD83C\uDF9B",
        convenience_store: "\uD83C\uDFEA",
        cookie: "\uD83C\uDF6A",
        cool: "\uD83C\uDD92",
        policeman: "\uD83D\uDC6E",
        copyright: "\xa9\uFE0F",
        corn: "\uD83C\uDF3D",
        couch_and_lamp: "\uD83D\uDECB",
        couple: "\uD83D\uDC6B",
        couple_with_heart_woman_man: "\uD83D\uDC91",
        couple_with_heart_man_man: "\uD83D\uDC68&zwj;\u2764\uFE0F&zwj;\uD83D\uDC68",
        couple_with_heart_woman_woman: "\uD83D\uDC69&zwj;\u2764\uFE0F&zwj;\uD83D\uDC69",
        couplekiss_man_man: "\uD83D\uDC68&zwj;\u2764\uFE0F&zwj;\uD83D\uDC8B&zwj;\uD83D\uDC68",
        couplekiss_man_woman: "\uD83D\uDC8F",
        couplekiss_woman_woman: "\uD83D\uDC69&zwj;\u2764\uFE0F&zwj;\uD83D\uDC8B&zwj;\uD83D\uDC69",
        cow: "\uD83D\uDC2E",
        cow2: "\uD83D\uDC04",
        cowboy_hat_face: "\uD83E\uDD20",
        crab: "\uD83E\uDD80",
        crayon: "\uD83D\uDD8D",
        credit_card: "\uD83D\uDCB3",
        crescent_moon: "\uD83C\uDF19",
        cricket: "\uD83C\uDFCF",
        crocodile: "\uD83D\uDC0A",
        croissant: "\uD83E\uDD50",
        crossed_fingers: "\uD83E\uDD1E",
        crossed_flags: "\uD83C\uDF8C",
        crossed_swords: "\u2694\uFE0F",
        crown: "\uD83D\uDC51",
        cry: "\uD83D\uDE22",
        crying_cat_face: "\uD83D\uDE3F",
        crystal_ball: "\uD83D\uDD2E",
        cucumber: "\uD83E\uDD52",
        cupid: "\uD83D\uDC98",
        curly_loop: "\u27B0",
        currency_exchange: "\uD83D\uDCB1",
        curry: "\uD83C\uDF5B",
        custard: "\uD83C\uDF6E",
        customs: "\uD83D\uDEC3",
        cyclone: "\uD83C\uDF00",
        dagger: "\uD83D\uDDE1",
        dancer: "\uD83D\uDC83",
        dancing_women: "\uD83D\uDC6F",
        dancing_men: "\uD83D\uDC6F&zwj;\u2642\uFE0F",
        dango: "\uD83C\uDF61",
        dark_sunglasses: "\uD83D\uDD76",
        dart: "\uD83C\uDFAF",
        dash: "\uD83D\uDCA8",
        date: "\uD83D\uDCC5",
        deciduous_tree: "\uD83C\uDF33",
        deer: "\uD83E\uDD8C",
        department_store: "\uD83C\uDFEC",
        derelict_house: "\uD83C\uDFDA",
        desert: "\uD83C\uDFDC",
        desert_island: "\uD83C\uDFDD",
        desktop_computer: "\uD83D\uDDA5",
        male_detective: "\uD83D\uDD75\uFE0F",
        diamond_shape_with_a_dot_inside: "\uD83D\uDCA0",
        diamonds: "\u2666\uFE0F",
        disappointed: "\uD83D\uDE1E",
        disappointed_relieved: "\uD83D\uDE25",
        dizzy: "\uD83D\uDCAB",
        dizzy_face: "\uD83D\uDE35",
        do_not_litter: "\uD83D\uDEAF",
        dog: "\uD83D\uDC36",
        dog2: "\uD83D\uDC15",
        dollar: "\uD83D\uDCB5",
        dolls: "\uD83C\uDF8E",
        dolphin: "\uD83D\uDC2C",
        door: "\uD83D\uDEAA",
        doughnut: "\uD83C\uDF69",
        dove: "\uD83D\uDD4A",
        dragon: "\uD83D\uDC09",
        dragon_face: "\uD83D\uDC32",
        dress: "\uD83D\uDC57",
        dromedary_camel: "\uD83D\uDC2A",
        drooling_face: "\uD83E\uDD24",
        droplet: "\uD83D\uDCA7",
        drum: "\uD83E\uDD41",
        duck: "\uD83E\uDD86",
        dvd: "\uD83D\uDCC0",
        "e-mail": "\uD83D\uDCE7",
        eagle: "\uD83E\uDD85",
        ear: "\uD83D\uDC42",
        ear_of_rice: "\uD83C\uDF3E",
        earth_africa: "\uD83C\uDF0D",
        earth_americas: "\uD83C\uDF0E",
        earth_asia: "\uD83C\uDF0F",
        egg: "\uD83E\uDD5A",
        eggplant: "\uD83C\uDF46",
        eight_pointed_black_star: "\u2734\uFE0F",
        eight_spoked_asterisk: "\u2733\uFE0F",
        electric_plug: "\uD83D\uDD0C",
        elephant: "\uD83D\uDC18",
        email: "\u2709\uFE0F",
        end: "\uD83D\uDD1A",
        envelope_with_arrow: "\uD83D\uDCE9",
        euro: "\uD83D\uDCB6",
        european_castle: "\uD83C\uDFF0",
        european_post_office: "\uD83C\uDFE4",
        evergreen_tree: "\uD83C\uDF32",
        exclamation: "\u2757\uFE0F",
        expressionless: "\uD83D\uDE11",
        eye: "\uD83D\uDC41",
        eye_speech_bubble: "\uD83D\uDC41&zwj;\uD83D\uDDE8",
        eyeglasses: "\uD83D\uDC53",
        eyes: "\uD83D\uDC40",
        face_with_head_bandage: "\uD83E\uDD15",
        face_with_thermometer: "\uD83E\uDD12",
        fist_oncoming: "\uD83D\uDC4A",
        factory: "\uD83C\uDFED",
        fallen_leaf: "\uD83C\uDF42",
        family_man_woman_boy: "\uD83D\uDC6A",
        family_man_boy: "\uD83D\uDC68&zwj;\uD83D\uDC66",
        family_man_boy_boy: "\uD83D\uDC68&zwj;\uD83D\uDC66&zwj;\uD83D\uDC66",
        family_man_girl: "\uD83D\uDC68&zwj;\uD83D\uDC67",
        family_man_girl_boy: "\uD83D\uDC68&zwj;\uD83D\uDC67&zwj;\uD83D\uDC66",
        family_man_girl_girl: "\uD83D\uDC68&zwj;\uD83D\uDC67&zwj;\uD83D\uDC67",
        family_man_man_boy: "\uD83D\uDC68&zwj;\uD83D\uDC68&zwj;\uD83D\uDC66",
        family_man_man_boy_boy: "\uD83D\uDC68&zwj;\uD83D\uDC68&zwj;\uD83D\uDC66&zwj;\uD83D\uDC66",
        family_man_man_girl: "\uD83D\uDC68&zwj;\uD83D\uDC68&zwj;\uD83D\uDC67",
        family_man_man_girl_boy: "\uD83D\uDC68&zwj;\uD83D\uDC68&zwj;\uD83D\uDC67&zwj;\uD83D\uDC66",
        family_man_man_girl_girl: "\uD83D\uDC68&zwj;\uD83D\uDC68&zwj;\uD83D\uDC67&zwj;\uD83D\uDC67",
        family_man_woman_boy_boy: "\uD83D\uDC68&zwj;\uD83D\uDC69&zwj;\uD83D\uDC66&zwj;\uD83D\uDC66",
        family_man_woman_girl: "\uD83D\uDC68&zwj;\uD83D\uDC69&zwj;\uD83D\uDC67",
        family_man_woman_girl_boy: "\uD83D\uDC68&zwj;\uD83D\uDC69&zwj;\uD83D\uDC67&zwj;\uD83D\uDC66",
        family_man_woman_girl_girl: "\uD83D\uDC68&zwj;\uD83D\uDC69&zwj;\uD83D\uDC67&zwj;\uD83D\uDC67",
        family_woman_boy: "\uD83D\uDC69&zwj;\uD83D\uDC66",
        family_woman_boy_boy: "\uD83D\uDC69&zwj;\uD83D\uDC66&zwj;\uD83D\uDC66",
        family_woman_girl: "\uD83D\uDC69&zwj;\uD83D\uDC67",
        family_woman_girl_boy: "\uD83D\uDC69&zwj;\uD83D\uDC67&zwj;\uD83D\uDC66",
        family_woman_girl_girl: "\uD83D\uDC69&zwj;\uD83D\uDC67&zwj;\uD83D\uDC67",
        family_woman_woman_boy: "\uD83D\uDC69&zwj;\uD83D\uDC69&zwj;\uD83D\uDC66",
        family_woman_woman_boy_boy: "\uD83D\uDC69&zwj;\uD83D\uDC69&zwj;\uD83D\uDC66&zwj;\uD83D\uDC66",
        family_woman_woman_girl: "\uD83D\uDC69&zwj;\uD83D\uDC69&zwj;\uD83D\uDC67",
        family_woman_woman_girl_boy: "\uD83D\uDC69&zwj;\uD83D\uDC69&zwj;\uD83D\uDC67&zwj;\uD83D\uDC66",
        family_woman_woman_girl_girl: "\uD83D\uDC69&zwj;\uD83D\uDC69&zwj;\uD83D\uDC67&zwj;\uD83D\uDC67",
        fast_forward: "\u23E9",
        fax: "\uD83D\uDCE0",
        fearful: "\uD83D\uDE28",
        feet: "\uD83D\uDC3E",
        female_detective: "\uD83D\uDD75\uFE0F&zwj;\u2640\uFE0F",
        ferris_wheel: "\uD83C\uDFA1",
        ferry: "\u26F4",
        field_hockey: "\uD83C\uDFD1",
        file_cabinet: "\uD83D\uDDC4",
        file_folder: "\uD83D\uDCC1",
        film_projector: "\uD83D\uDCFD",
        film_strip: "\uD83C\uDF9E",
        fire: "\uD83D\uDD25",
        fire_engine: "\uD83D\uDE92",
        fireworks: "\uD83C\uDF86",
        first_quarter_moon: "\uD83C\uDF13",
        first_quarter_moon_with_face: "\uD83C\uDF1B",
        fish: "\uD83D\uDC1F",
        fish_cake: "\uD83C\uDF65",
        fishing_pole_and_fish: "\uD83C\uDFA3",
        fist_raised: "\u270A",
        fist_left: "\uD83E\uDD1B",
        fist_right: "\uD83E\uDD1C",
        flags: "\uD83C\uDF8F",
        flashlight: "\uD83D\uDD26",
        fleur_de_lis: "\u269C\uFE0F",
        flight_arrival: "\uD83D\uDEEC",
        flight_departure: "\uD83D\uDEEB",
        floppy_disk: "\uD83D\uDCBE",
        flower_playing_cards: "\uD83C\uDFB4",
        flushed: "\uD83D\uDE33",
        fog: "\uD83C\uDF2B",
        foggy: "\uD83C\uDF01",
        football: "\uD83C\uDFC8",
        footprints: "\uD83D\uDC63",
        fork_and_knife: "\uD83C\uDF74",
        fountain: "\u26F2\uFE0F",
        fountain_pen: "\uD83D\uDD8B",
        four_leaf_clover: "\uD83C\uDF40",
        fox_face: "\uD83E\uDD8A",
        framed_picture: "\uD83D\uDDBC",
        free: "\uD83C\uDD93",
        fried_egg: "\uD83C\uDF73",
        fried_shrimp: "\uD83C\uDF64",
        fries: "\uD83C\uDF5F",
        frog: "\uD83D\uDC38",
        frowning: "\uD83D\uDE26",
        frowning_face: "\u2639\uFE0F",
        frowning_man: "\uD83D\uDE4D&zwj;\u2642\uFE0F",
        frowning_woman: "\uD83D\uDE4D",
        middle_finger: "\uD83D\uDD95",
        fuelpump: "\u26FD\uFE0F",
        full_moon: "\uD83C\uDF15",
        full_moon_with_face: "\uD83C\uDF1D",
        funeral_urn: "\u26B1\uFE0F",
        game_die: "\uD83C\uDFB2",
        gear: "\u2699\uFE0F",
        gem: "\uD83D\uDC8E",
        gemini: "\u264A\uFE0F",
        ghost: "\uD83D\uDC7B",
        gift: "\uD83C\uDF81",
        gift_heart: "\uD83D\uDC9D",
        girl: "\uD83D\uDC67",
        globe_with_meridians: "\uD83C\uDF10",
        goal_net: "\uD83E\uDD45",
        goat: "\uD83D\uDC10",
        golf: "\u26F3\uFE0F",
        golfing_man: "\uD83C\uDFCC\uFE0F",
        golfing_woman: "\uD83C\uDFCC\uFE0F&zwj;\u2640\uFE0F",
        gorilla: "\uD83E\uDD8D",
        grapes: "\uD83C\uDF47",
        green_apple: "\uD83C\uDF4F",
        green_book: "\uD83D\uDCD7",
        green_heart: "\uD83D\uDC9A",
        green_salad: "\uD83E\uDD57",
        grey_exclamation: "\u2755",
        grey_question: "\u2754",
        grimacing: "\uD83D\uDE2C",
        grin: "\uD83D\uDE01",
        grinning: "\uD83D\uDE00",
        guardsman: "\uD83D\uDC82",
        guardswoman: "\uD83D\uDC82&zwj;\u2640\uFE0F",
        guitar: "\uD83C\uDFB8",
        gun: "\uD83D\uDD2B",
        haircut_woman: "\uD83D\uDC87",
        haircut_man: "\uD83D\uDC87&zwj;\u2642\uFE0F",
        hamburger: "\uD83C\uDF54",
        hammer: "\uD83D\uDD28",
        hammer_and_pick: "\u2692",
        hammer_and_wrench: "\uD83D\uDEE0",
        hamster: "\uD83D\uDC39",
        hand: "\u270B",
        handbag: "\uD83D\uDC5C",
        handshake: "\uD83E\uDD1D",
        hankey: "\uD83D\uDCA9",
        hatched_chick: "\uD83D\uDC25",
        hatching_chick: "\uD83D\uDC23",
        headphones: "\uD83C\uDFA7",
        hear_no_evil: "\uD83D\uDE49",
        heart: "\u2764\uFE0F",
        heart_decoration: "\uD83D\uDC9F",
        heart_eyes: "\uD83D\uDE0D",
        heart_eyes_cat: "\uD83D\uDE3B",
        heartbeat: "\uD83D\uDC93",
        heartpulse: "\uD83D\uDC97",
        hearts: "\u2665\uFE0F",
        heavy_check_mark: "\u2714\uFE0F",
        heavy_division_sign: "\u2797",
        heavy_dollar_sign: "\uD83D\uDCB2",
        heavy_heart_exclamation: "\u2763\uFE0F",
        heavy_minus_sign: "\u2796",
        heavy_multiplication_x: "\u2716\uFE0F",
        heavy_plus_sign: "\u2795",
        helicopter: "\uD83D\uDE81",
        herb: "\uD83C\uDF3F",
        hibiscus: "\uD83C\uDF3A",
        high_brightness: "\uD83D\uDD06",
        high_heel: "\uD83D\uDC60",
        hocho: "\uD83D\uDD2A",
        hole: "\uD83D\uDD73",
        honey_pot: "\uD83C\uDF6F",
        horse: "\uD83D\uDC34",
        horse_racing: "\uD83C\uDFC7",
        hospital: "\uD83C\uDFE5",
        hot_pepper: "\uD83C\uDF36",
        hotdog: "\uD83C\uDF2D",
        hotel: "\uD83C\uDFE8",
        hotsprings: "\u2668\uFE0F",
        hourglass: "\u231B\uFE0F",
        hourglass_flowing_sand: "\u23F3",
        house: "\uD83C\uDFE0",
        house_with_garden: "\uD83C\uDFE1",
        houses: "\uD83C\uDFD8",
        hugs: "\uD83E\uDD17",
        hushed: "\uD83D\uDE2F",
        ice_cream: "\uD83C\uDF68",
        ice_hockey: "\uD83C\uDFD2",
        ice_skate: "\u26F8",
        icecream: "\uD83C\uDF66",
        id: "\uD83C\uDD94",
        ideograph_advantage: "\uD83C\uDE50",
        imp: "\uD83D\uDC7F",
        inbox_tray: "\uD83D\uDCE5",
        incoming_envelope: "\uD83D\uDCE8",
        tipping_hand_woman: "\uD83D\uDC81",
        information_source: "\u2139\uFE0F",
        innocent: "\uD83D\uDE07",
        interrobang: "\u2049\uFE0F",
        iphone: "\uD83D\uDCF1",
        izakaya_lantern: "\uD83C\uDFEE",
        jack_o_lantern: "\uD83C\uDF83",
        japan: "\uD83D\uDDFE",
        japanese_castle: "\uD83C\uDFEF",
        japanese_goblin: "\uD83D\uDC7A",
        japanese_ogre: "\uD83D\uDC79",
        jeans: "\uD83D\uDC56",
        joy: "\uD83D\uDE02",
        joy_cat: "\uD83D\uDE39",
        joystick: "\uD83D\uDD79",
        kaaba: "\uD83D\uDD4B",
        key: "\uD83D\uDD11",
        keyboard: "\u2328\uFE0F",
        keycap_ten: "\uD83D\uDD1F",
        kick_scooter: "\uD83D\uDEF4",
        kimono: "\uD83D\uDC58",
        kiss: "\uD83D\uDC8B",
        kissing: "\uD83D\uDE17",
        kissing_cat: "\uD83D\uDE3D",
        kissing_closed_eyes: "\uD83D\uDE1A",
        kissing_heart: "\uD83D\uDE18",
        kissing_smiling_eyes: "\uD83D\uDE19",
        kiwi_fruit: "\uD83E\uDD5D",
        koala: "\uD83D\uDC28",
        koko: "\uD83C\uDE01",
        label: "\uD83C\uDFF7",
        large_blue_circle: "\uD83D\uDD35",
        large_blue_diamond: "\uD83D\uDD37",
        large_orange_diamond: "\uD83D\uDD36",
        last_quarter_moon: "\uD83C\uDF17",
        last_quarter_moon_with_face: "\uD83C\uDF1C",
        latin_cross: "\u271D\uFE0F",
        laughing: "\uD83D\uDE06",
        leaves: "\uD83C\uDF43",
        ledger: "\uD83D\uDCD2",
        left_luggage: "\uD83D\uDEC5",
        left_right_arrow: "\u2194\uFE0F",
        leftwards_arrow_with_hook: "\u21A9\uFE0F",
        lemon: "\uD83C\uDF4B",
        leo: "\u264C\uFE0F",
        leopard: "\uD83D\uDC06",
        level_slider: "\uD83C\uDF9A",
        libra: "\u264E\uFE0F",
        light_rail: "\uD83D\uDE88",
        link: "\uD83D\uDD17",
        lion: "\uD83E\uDD81",
        lips: "\uD83D\uDC44",
        lipstick: "\uD83D\uDC84",
        lizard: "\uD83E\uDD8E",
        lock: "\uD83D\uDD12",
        lock_with_ink_pen: "\uD83D\uDD0F",
        lollipop: "\uD83C\uDF6D",
        loop: "\u27BF",
        loud_sound: "\uD83D\uDD0A",
        loudspeaker: "\uD83D\uDCE2",
        love_hotel: "\uD83C\uDFE9",
        love_letter: "\uD83D\uDC8C",
        low_brightness: "\uD83D\uDD05",
        lying_face: "\uD83E\uDD25",
        m: "\u24C2\uFE0F",
        mag: "\uD83D\uDD0D",
        mag_right: "\uD83D\uDD0E",
        mahjong: "\uD83C\uDC04\uFE0F",
        mailbox: "\uD83D\uDCEB",
        mailbox_closed: "\uD83D\uDCEA",
        mailbox_with_mail: "\uD83D\uDCEC",
        mailbox_with_no_mail: "\uD83D\uDCED",
        man: "\uD83D\uDC68",
        man_artist: "\uD83D\uDC68&zwj;\uD83C\uDFA8",
        man_astronaut: "\uD83D\uDC68&zwj;\uD83D\uDE80",
        man_cartwheeling: "\uD83E\uDD38&zwj;\u2642\uFE0F",
        man_cook: "\uD83D\uDC68&zwj;\uD83C\uDF73",
        man_dancing: "\uD83D\uDD7A",
        man_facepalming: "\uD83E\uDD26&zwj;\u2642\uFE0F",
        man_factory_worker: "\uD83D\uDC68&zwj;\uD83C\uDFED",
        man_farmer: "\uD83D\uDC68&zwj;\uD83C\uDF3E",
        man_firefighter: "\uD83D\uDC68&zwj;\uD83D\uDE92",
        man_health_worker: "\uD83D\uDC68&zwj;\u2695\uFE0F",
        man_in_tuxedo: "\uD83E\uDD35",
        man_judge: "\uD83D\uDC68&zwj;\u2696\uFE0F",
        man_juggling: "\uD83E\uDD39&zwj;\u2642\uFE0F",
        man_mechanic: "\uD83D\uDC68&zwj;\uD83D\uDD27",
        man_office_worker: "\uD83D\uDC68&zwj;\uD83D\uDCBC",
        man_pilot: "\uD83D\uDC68&zwj;\u2708\uFE0F",
        man_playing_handball: "\uD83E\uDD3E&zwj;\u2642\uFE0F",
        man_playing_water_polo: "\uD83E\uDD3D&zwj;\u2642\uFE0F",
        man_scientist: "\uD83D\uDC68&zwj;\uD83D\uDD2C",
        man_shrugging: "\uD83E\uDD37&zwj;\u2642\uFE0F",
        man_singer: "\uD83D\uDC68&zwj;\uD83C\uDFA4",
        man_student: "\uD83D\uDC68&zwj;\uD83C\uDF93",
        man_teacher: "\uD83D\uDC68&zwj;\uD83C\uDFEB",
        man_technologist: "\uD83D\uDC68&zwj;\uD83D\uDCBB",
        man_with_gua_pi_mao: "\uD83D\uDC72",
        man_with_turban: "\uD83D\uDC73",
        tangerine: "\uD83C\uDF4A",
        mans_shoe: "\uD83D\uDC5E",
        mantelpiece_clock: "\uD83D\uDD70",
        maple_leaf: "\uD83C\uDF41",
        martial_arts_uniform: "\uD83E\uDD4B",
        mask: "\uD83D\uDE37",
        massage_woman: "\uD83D\uDC86",
        massage_man: "\uD83D\uDC86&zwj;\u2642\uFE0F",
        meat_on_bone: "\uD83C\uDF56",
        medal_military: "\uD83C\uDF96",
        medal_sports: "\uD83C\uDFC5",
        mega: "\uD83D\uDCE3",
        melon: "\uD83C\uDF48",
        memo: "\uD83D\uDCDD",
        men_wrestling: "\uD83E\uDD3C&zwj;\u2642\uFE0F",
        menorah: "\uD83D\uDD4E",
        mens: "\uD83D\uDEB9",
        metal: "\uD83E\uDD18",
        metro: "\uD83D\uDE87",
        microphone: "\uD83C\uDFA4",
        microscope: "\uD83D\uDD2C",
        milk_glass: "\uD83E\uDD5B",
        milky_way: "\uD83C\uDF0C",
        minibus: "\uD83D\uDE90",
        minidisc: "\uD83D\uDCBD",
        mobile_phone_off: "\uD83D\uDCF4",
        money_mouth_face: "\uD83E\uDD11",
        money_with_wings: "\uD83D\uDCB8",
        moneybag: "\uD83D\uDCB0",
        monkey: "\uD83D\uDC12",
        monkey_face: "\uD83D\uDC35",
        monorail: "\uD83D\uDE9D",
        moon: "\uD83C\uDF14",
        mortar_board: "\uD83C\uDF93",
        mosque: "\uD83D\uDD4C",
        motor_boat: "\uD83D\uDEE5",
        motor_scooter: "\uD83D\uDEF5",
        motorcycle: "\uD83C\uDFCD",
        motorway: "\uD83D\uDEE3",
        mount_fuji: "\uD83D\uDDFB",
        mountain: "\u26F0",
        mountain_biking_man: "\uD83D\uDEB5",
        mountain_biking_woman: "\uD83D\uDEB5&zwj;\u2640\uFE0F",
        mountain_cableway: "\uD83D\uDEA0",
        mountain_railway: "\uD83D\uDE9E",
        mountain_snow: "\uD83C\uDFD4",
        mouse: "\uD83D\uDC2D",
        mouse2: "\uD83D\uDC01",
        movie_camera: "\uD83C\uDFA5",
        moyai: "\uD83D\uDDFF",
        mrs_claus: "\uD83E\uDD36",
        muscle: "\uD83D\uDCAA",
        mushroom: "\uD83C\uDF44",
        musical_keyboard: "\uD83C\uDFB9",
        musical_note: "\uD83C\uDFB5",
        musical_score: "\uD83C\uDFBC",
        mute: "\uD83D\uDD07",
        nail_care: "\uD83D\uDC85",
        name_badge: "\uD83D\uDCDB",
        national_park: "\uD83C\uDFDE",
        nauseated_face: "\uD83E\uDD22",
        necktie: "\uD83D\uDC54",
        negative_squared_cross_mark: "\u274E",
        nerd_face: "\uD83E\uDD13",
        neutral_face: "\uD83D\uDE10",
        new: "\uD83C\uDD95",
        new_moon: "\uD83C\uDF11",
        new_moon_with_face: "\uD83C\uDF1A",
        newspaper: "\uD83D\uDCF0",
        newspaper_roll: "\uD83D\uDDDE",
        next_track_button: "\u23ED",
        ng: "\uD83C\uDD96",
        no_good_man: "\uD83D\uDE45&zwj;\u2642\uFE0F",
        no_good_woman: "\uD83D\uDE45",
        night_with_stars: "\uD83C\uDF03",
        no_bell: "\uD83D\uDD15",
        no_bicycles: "\uD83D\uDEB3",
        no_entry: "\u26D4\uFE0F",
        no_entry_sign: "\uD83D\uDEAB",
        no_mobile_phones: "\uD83D\uDCF5",
        no_mouth: "\uD83D\uDE36",
        no_pedestrians: "\uD83D\uDEB7",
        no_smoking: "\uD83D\uDEAD",
        "non-potable_water": "\uD83D\uDEB1",
        nose: "\uD83D\uDC43",
        notebook: "\uD83D\uDCD3",
        notebook_with_decorative_cover: "\uD83D\uDCD4",
        notes: "\uD83C\uDFB6",
        nut_and_bolt: "\uD83D\uDD29",
        o: "\u2B55\uFE0F",
        o2: "\uD83C\uDD7E\uFE0F",
        ocean: "\uD83C\uDF0A",
        octopus: "\uD83D\uDC19",
        oden: "\uD83C\uDF62",
        office: "\uD83C\uDFE2",
        oil_drum: "\uD83D\uDEE2",
        ok: "\uD83C\uDD97",
        ok_hand: "\uD83D\uDC4C",
        ok_man: "\uD83D\uDE46&zwj;\u2642\uFE0F",
        ok_woman: "\uD83D\uDE46",
        old_key: "\uD83D\uDDDD",
        older_man: "\uD83D\uDC74",
        older_woman: "\uD83D\uDC75",
        om: "\uD83D\uDD49",
        on: "\uD83D\uDD1B",
        oncoming_automobile: "\uD83D\uDE98",
        oncoming_bus: "\uD83D\uDE8D",
        oncoming_police_car: "\uD83D\uDE94",
        oncoming_taxi: "\uD83D\uDE96",
        open_file_folder: "\uD83D\uDCC2",
        open_hands: "\uD83D\uDC50",
        open_mouth: "\uD83D\uDE2E",
        open_umbrella: "\u2602\uFE0F",
        ophiuchus: "\u26CE",
        orange_book: "\uD83D\uDCD9",
        orthodox_cross: "\u2626\uFE0F",
        outbox_tray: "\uD83D\uDCE4",
        owl: "\uD83E\uDD89",
        ox: "\uD83D\uDC02",
        package: "\uD83D\uDCE6",
        page_facing_up: "\uD83D\uDCC4",
        page_with_curl: "\uD83D\uDCC3",
        pager: "\uD83D\uDCDF",
        paintbrush: "\uD83D\uDD8C",
        palm_tree: "\uD83C\uDF34",
        pancakes: "\uD83E\uDD5E",
        panda_face: "\uD83D\uDC3C",
        paperclip: "\uD83D\uDCCE",
        paperclips: "\uD83D\uDD87",
        parasol_on_ground: "\u26F1",
        parking: "\uD83C\uDD7F\uFE0F",
        part_alternation_mark: "\u303D\uFE0F",
        partly_sunny: "\u26C5\uFE0F",
        passenger_ship: "\uD83D\uDEF3",
        passport_control: "\uD83D\uDEC2",
        pause_button: "\u23F8",
        peace_symbol: "\u262E\uFE0F",
        peach: "\uD83C\uDF51",
        peanuts: "\uD83E\uDD5C",
        pear: "\uD83C\uDF50",
        pen: "\uD83D\uDD8A",
        pencil2: "\u270F\uFE0F",
        penguin: "\uD83D\uDC27",
        pensive: "\uD83D\uDE14",
        performing_arts: "\uD83C\uDFAD",
        persevere: "\uD83D\uDE23",
        person_fencing: "\uD83E\uDD3A",
        pouting_woman: "\uD83D\uDE4E",
        phone: "\u260E\uFE0F",
        pick: "\u26CF",
        pig: "\uD83D\uDC37",
        pig2: "\uD83D\uDC16",
        pig_nose: "\uD83D\uDC3D",
        pill: "\uD83D\uDC8A",
        pineapple: "\uD83C\uDF4D",
        ping_pong: "\uD83C\uDFD3",
        pisces: "\u2653\uFE0F",
        pizza: "\uD83C\uDF55",
        place_of_worship: "\uD83D\uDED0",
        plate_with_cutlery: "\uD83C\uDF7D",
        play_or_pause_button: "\u23EF",
        point_down: "\uD83D\uDC47",
        point_left: "\uD83D\uDC48",
        point_right: "\uD83D\uDC49",
        point_up: "\u261D\uFE0F",
        point_up_2: "\uD83D\uDC46",
        police_car: "\uD83D\uDE93",
        policewoman: "\uD83D\uDC6E&zwj;\u2640\uFE0F",
        poodle: "\uD83D\uDC29",
        popcorn: "\uD83C\uDF7F",
        post_office: "\uD83C\uDFE3",
        postal_horn: "\uD83D\uDCEF",
        postbox: "\uD83D\uDCEE",
        potable_water: "\uD83D\uDEB0",
        potato: "\uD83E\uDD54",
        pouch: "\uD83D\uDC5D",
        poultry_leg: "\uD83C\uDF57",
        pound: "\uD83D\uDCB7",
        rage: "\uD83D\uDE21",
        pouting_cat: "\uD83D\uDE3E",
        pouting_man: "\uD83D\uDE4E&zwj;\u2642\uFE0F",
        pray: "\uD83D\uDE4F",
        prayer_beads: "\uD83D\uDCFF",
        pregnant_woman: "\uD83E\uDD30",
        previous_track_button: "\u23EE",
        prince: "\uD83E\uDD34",
        princess: "\uD83D\uDC78",
        printer: "\uD83D\uDDA8",
        purple_heart: "\uD83D\uDC9C",
        purse: "\uD83D\uDC5B",
        pushpin: "\uD83D\uDCCC",
        put_litter_in_its_place: "\uD83D\uDEAE",
        question: "\u2753",
        rabbit: "\uD83D\uDC30",
        rabbit2: "\uD83D\uDC07",
        racehorse: "\uD83D\uDC0E",
        racing_car: "\uD83C\uDFCE",
        radio: "\uD83D\uDCFB",
        radio_button: "\uD83D\uDD18",
        radioactive: "\u2622\uFE0F",
        railway_car: "\uD83D\uDE83",
        railway_track: "\uD83D\uDEE4",
        rainbow: "\uD83C\uDF08",
        rainbow_flag: "\uD83C\uDFF3\uFE0F&zwj;\uD83C\uDF08",
        raised_back_of_hand: "\uD83E\uDD1A",
        raised_hand_with_fingers_splayed: "\uD83D\uDD90",
        raised_hands: "\uD83D\uDE4C",
        raising_hand_woman: "\uD83D\uDE4B",
        raising_hand_man: "\uD83D\uDE4B&zwj;\u2642\uFE0F",
        ram: "\uD83D\uDC0F",
        ramen: "\uD83C\uDF5C",
        rat: "\uD83D\uDC00",
        record_button: "\u23FA",
        recycle: "\u267B\uFE0F",
        red_circle: "\uD83D\uDD34",
        registered: "\xae\uFE0F",
        relaxed: "\u263A\uFE0F",
        relieved: "\uD83D\uDE0C",
        reminder_ribbon: "\uD83C\uDF97",
        repeat: "\uD83D\uDD01",
        repeat_one: "\uD83D\uDD02",
        rescue_worker_helmet: "\u26D1",
        restroom: "\uD83D\uDEBB",
        revolving_hearts: "\uD83D\uDC9E",
        rewind: "\u23EA",
        rhinoceros: "\uD83E\uDD8F",
        ribbon: "\uD83C\uDF80",
        rice: "\uD83C\uDF5A",
        rice_ball: "\uD83C\uDF59",
        rice_cracker: "\uD83C\uDF58",
        rice_scene: "\uD83C\uDF91",
        right_anger_bubble: "\uD83D\uDDEF",
        ring: "\uD83D\uDC8D",
        robot: "\uD83E\uDD16",
        rocket: "\uD83D\uDE80",
        rofl: "\uD83E\uDD23",
        roll_eyes: "\uD83D\uDE44",
        roller_coaster: "\uD83C\uDFA2",
        rooster: "\uD83D\uDC13",
        rose: "\uD83C\uDF39",
        rosette: "\uD83C\uDFF5",
        rotating_light: "\uD83D\uDEA8",
        round_pushpin: "\uD83D\uDCCD",
        rowing_man: "\uD83D\uDEA3",
        rowing_woman: "\uD83D\uDEA3&zwj;\u2640\uFE0F",
        rugby_football: "\uD83C\uDFC9",
        running_man: "\uD83C\uDFC3",
        running_shirt_with_sash: "\uD83C\uDFBD",
        running_woman: "\uD83C\uDFC3&zwj;\u2640\uFE0F",
        sa: "\uD83C\uDE02\uFE0F",
        sagittarius: "\u2650\uFE0F",
        sake: "\uD83C\uDF76",
        sandal: "\uD83D\uDC61",
        santa: "\uD83C\uDF85",
        satellite: "\uD83D\uDCE1",
        saxophone: "\uD83C\uDFB7",
        school: "\uD83C\uDFEB",
        school_satchel: "\uD83C\uDF92",
        scissors: "\u2702\uFE0F",
        scorpion: "\uD83E\uDD82",
        scorpius: "\u264F\uFE0F",
        scream: "\uD83D\uDE31",
        scream_cat: "\uD83D\uDE40",
        scroll: "\uD83D\uDCDC",
        seat: "\uD83D\uDCBA",
        secret: "\u3299\uFE0F",
        see_no_evil: "\uD83D\uDE48",
        seedling: "\uD83C\uDF31",
        selfie: "\uD83E\uDD33",
        shallow_pan_of_food: "\uD83E\uDD58",
        shamrock: "\u2618\uFE0F",
        shark: "\uD83E\uDD88",
        shaved_ice: "\uD83C\uDF67",
        sheep: "\uD83D\uDC11",
        shell: "\uD83D\uDC1A",
        shield: "\uD83D\uDEE1",
        shinto_shrine: "\u26E9",
        ship: "\uD83D\uDEA2",
        shirt: "\uD83D\uDC55",
        shopping: "\uD83D\uDECD",
        shopping_cart: "\uD83D\uDED2",
        shower: "\uD83D\uDEBF",
        shrimp: "\uD83E\uDD90",
        signal_strength: "\uD83D\uDCF6",
        six_pointed_star: "\uD83D\uDD2F",
        ski: "\uD83C\uDFBF",
        skier: "\u26F7",
        skull: "\uD83D\uDC80",
        skull_and_crossbones: "\u2620\uFE0F",
        sleeping: "\uD83D\uDE34",
        sleeping_bed: "\uD83D\uDECC",
        sleepy: "\uD83D\uDE2A",
        slightly_frowning_face: "\uD83D\uDE41",
        slightly_smiling_face: "\uD83D\uDE42",
        slot_machine: "\uD83C\uDFB0",
        small_airplane: "\uD83D\uDEE9",
        small_blue_diamond: "\uD83D\uDD39",
        small_orange_diamond: "\uD83D\uDD38",
        small_red_triangle: "\uD83D\uDD3A",
        small_red_triangle_down: "\uD83D\uDD3B",
        smile: "\uD83D\uDE04",
        smile_cat: "\uD83D\uDE38",
        smiley: "\uD83D\uDE03",
        smiley_cat: "\uD83D\uDE3A",
        smiling_imp: "\uD83D\uDE08",
        smirk: "\uD83D\uDE0F",
        smirk_cat: "\uD83D\uDE3C",
        smoking: "\uD83D\uDEAC",
        snail: "\uD83D\uDC0C",
        snake: "\uD83D\uDC0D",
        sneezing_face: "\uD83E\uDD27",
        snowboarder: "\uD83C\uDFC2",
        snowflake: "\u2744\uFE0F",
        snowman: "\u26C4\uFE0F",
        snowman_with_snow: "\u2603\uFE0F",
        sob: "\uD83D\uDE2D",
        soccer: "\u26BD\uFE0F",
        soon: "\uD83D\uDD1C",
        sos: "\uD83C\uDD98",
        sound: "\uD83D\uDD09",
        space_invader: "\uD83D\uDC7E",
        spades: "\u2660\uFE0F",
        spaghetti: "\uD83C\uDF5D",
        sparkle: "\u2747\uFE0F",
        sparkler: "\uD83C\uDF87",
        sparkles: "\u2728",
        sparkling_heart: "\uD83D\uDC96",
        speak_no_evil: "\uD83D\uDE4A",
        speaker: "\uD83D\uDD08",
        speaking_head: "\uD83D\uDDE3",
        speech_balloon: "\uD83D\uDCAC",
        speedboat: "\uD83D\uDEA4",
        spider: "\uD83D\uDD77",
        spider_web: "\uD83D\uDD78",
        spiral_calendar: "\uD83D\uDDD3",
        spiral_notepad: "\uD83D\uDDD2",
        spoon: "\uD83E\uDD44",
        squid: "\uD83E\uDD91",
        stadium: "\uD83C\uDFDF",
        star: "\u2B50\uFE0F",
        star2: "\uD83C\uDF1F",
        star_and_crescent: "\u262A\uFE0F",
        star_of_david: "\u2721\uFE0F",
        stars: "\uD83C\uDF20",
        station: "\uD83D\uDE89",
        statue_of_liberty: "\uD83D\uDDFD",
        steam_locomotive: "\uD83D\uDE82",
        stew: "\uD83C\uDF72",
        stop_button: "\u23F9",
        stop_sign: "\uD83D\uDED1",
        stopwatch: "\u23F1",
        straight_ruler: "\uD83D\uDCCF",
        strawberry: "\uD83C\uDF53",
        stuck_out_tongue: "\uD83D\uDE1B",
        stuck_out_tongue_closed_eyes: "\uD83D\uDE1D",
        stuck_out_tongue_winking_eye: "\uD83D\uDE1C",
        studio_microphone: "\uD83C\uDF99",
        stuffed_flatbread: "\uD83E\uDD59",
        sun_behind_large_cloud: "\uD83C\uDF25",
        sun_behind_rain_cloud: "\uD83C\uDF26",
        sun_behind_small_cloud: "\uD83C\uDF24",
        sun_with_face: "\uD83C\uDF1E",
        sunflower: "\uD83C\uDF3B",
        sunglasses: "\uD83D\uDE0E",
        sunny: "\u2600\uFE0F",
        sunrise: "\uD83C\uDF05",
        sunrise_over_mountains: "\uD83C\uDF04",
        surfing_man: "\uD83C\uDFC4",
        surfing_woman: "\uD83C\uDFC4&zwj;\u2640\uFE0F",
        sushi: "\uD83C\uDF63",
        suspension_railway: "\uD83D\uDE9F",
        sweat: "\uD83D\uDE13",
        sweat_drops: "\uD83D\uDCA6",
        sweat_smile: "\uD83D\uDE05",
        sweet_potato: "\uD83C\uDF60",
        swimming_man: "\uD83C\uDFCA",
        swimming_woman: "\uD83C\uDFCA&zwj;\u2640\uFE0F",
        symbols: "\uD83D\uDD23",
        synagogue: "\uD83D\uDD4D",
        syringe: "\uD83D\uDC89",
        taco: "\uD83C\uDF2E",
        tada: "\uD83C\uDF89",
        tanabata_tree: "\uD83C\uDF8B",
        taurus: "\u2649\uFE0F",
        taxi: "\uD83D\uDE95",
        tea: "\uD83C\uDF75",
        telephone_receiver: "\uD83D\uDCDE",
        telescope: "\uD83D\uDD2D",
        tennis: "\uD83C\uDFBE",
        tent: "\u26FA\uFE0F",
        thermometer: "\uD83C\uDF21",
        thinking: "\uD83E\uDD14",
        thought_balloon: "\uD83D\uDCAD",
        ticket: "\uD83C\uDFAB",
        tickets: "\uD83C\uDF9F",
        tiger: "\uD83D\uDC2F",
        tiger2: "\uD83D\uDC05",
        timer_clock: "\u23F2",
        tipping_hand_man: "\uD83D\uDC81&zwj;\u2642\uFE0F",
        tired_face: "\uD83D\uDE2B",
        tm: "\u2122\uFE0F",
        toilet: "\uD83D\uDEBD",
        tokyo_tower: "\uD83D\uDDFC",
        tomato: "\uD83C\uDF45",
        tongue: "\uD83D\uDC45",
        top: "\uD83D\uDD1D",
        tophat: "\uD83C\uDFA9",
        tornado: "\uD83C\uDF2A",
        trackball: "\uD83D\uDDB2",
        tractor: "\uD83D\uDE9C",
        traffic_light: "\uD83D\uDEA5",
        train: "\uD83D\uDE8B",
        train2: "\uD83D\uDE86",
        tram: "\uD83D\uDE8A",
        triangular_flag_on_post: "\uD83D\uDEA9",
        triangular_ruler: "\uD83D\uDCD0",
        trident: "\uD83D\uDD31",
        triumph: "\uD83D\uDE24",
        trolleybus: "\uD83D\uDE8E",
        trophy: "\uD83C\uDFC6",
        tropical_drink: "\uD83C\uDF79",
        tropical_fish: "\uD83D\uDC20",
        truck: "\uD83D\uDE9A",
        trumpet: "\uD83C\uDFBA",
        tulip: "\uD83C\uDF37",
        tumbler_glass: "\uD83E\uDD43",
        turkey: "\uD83E\uDD83",
        turtle: "\uD83D\uDC22",
        tv: "\uD83D\uDCFA",
        twisted_rightwards_arrows: "\uD83D\uDD00",
        two_hearts: "\uD83D\uDC95",
        two_men_holding_hands: "\uD83D\uDC6C",
        two_women_holding_hands: "\uD83D\uDC6D",
        u5272: "\uD83C\uDE39",
        u5408: "\uD83C\uDE34",
        u55b6: "\uD83C\uDE3A",
        u6307: "\uD83C\uDE2F\uFE0F",
        u6708: "\uD83C\uDE37\uFE0F",
        u6709: "\uD83C\uDE36",
        u6e80: "\uD83C\uDE35",
        u7121: "\uD83C\uDE1A\uFE0F",
        u7533: "\uD83C\uDE38",
        u7981: "\uD83C\uDE32",
        u7a7a: "\uD83C\uDE33",
        umbrella: "\u2614\uFE0F",
        unamused: "\uD83D\uDE12",
        underage: "\uD83D\uDD1E",
        unicorn: "\uD83E\uDD84",
        unlock: "\uD83D\uDD13",
        up: "\uD83C\uDD99",
        upside_down_face: "\uD83D\uDE43",
        v: "\u270C\uFE0F",
        vertical_traffic_light: "\uD83D\uDEA6",
        vhs: "\uD83D\uDCFC",
        vibration_mode: "\uD83D\uDCF3",
        video_camera: "\uD83D\uDCF9",
        video_game: "\uD83C\uDFAE",
        violin: "\uD83C\uDFBB",
        virgo: "\u264D\uFE0F",
        volcano: "\uD83C\uDF0B",
        volleyball: "\uD83C\uDFD0",
        vs: "\uD83C\uDD9A",
        vulcan_salute: "\uD83D\uDD96",
        walking_man: "\uD83D\uDEB6",
        walking_woman: "\uD83D\uDEB6&zwj;\u2640\uFE0F",
        waning_crescent_moon: "\uD83C\uDF18",
        waning_gibbous_moon: "\uD83C\uDF16",
        warning: "\u26A0\uFE0F",
        wastebasket: "\uD83D\uDDD1",
        watch: "\u231A\uFE0F",
        water_buffalo: "\uD83D\uDC03",
        watermelon: "\uD83C\uDF49",
        wave: "\uD83D\uDC4B",
        wavy_dash: "\u3030\uFE0F",
        waxing_crescent_moon: "\uD83C\uDF12",
        wc: "\uD83D\uDEBE",
        weary: "\uD83D\uDE29",
        wedding: "\uD83D\uDC92",
        weight_lifting_man: "\uD83C\uDFCB\uFE0F",
        weight_lifting_woman: "\uD83C\uDFCB\uFE0F&zwj;\u2640\uFE0F",
        whale: "\uD83D\uDC33",
        whale2: "\uD83D\uDC0B",
        wheel_of_dharma: "\u2638\uFE0F",
        wheelchair: "\u267F\uFE0F",
        white_check_mark: "\u2705",
        white_circle: "\u26AA\uFE0F",
        white_flag: "\uD83C\uDFF3\uFE0F",
        white_flower: "\uD83D\uDCAE",
        white_large_square: "\u2B1C\uFE0F",
        white_medium_small_square: "\u25FD\uFE0F",
        white_medium_square: "\u25FB\uFE0F",
        white_small_square: "\u25AB\uFE0F",
        white_square_button: "\uD83D\uDD33",
        wilted_flower: "\uD83E\uDD40",
        wind_chime: "\uD83C\uDF90",
        wind_face: "\uD83C\uDF2C",
        wine_glass: "\uD83C\uDF77",
        wink: "\uD83D\uDE09",
        wolf: "\uD83D\uDC3A",
        woman: "\uD83D\uDC69",
        woman_artist: "\uD83D\uDC69&zwj;\uD83C\uDFA8",
        woman_astronaut: "\uD83D\uDC69&zwj;\uD83D\uDE80",
        woman_cartwheeling: "\uD83E\uDD38&zwj;\u2640\uFE0F",
        woman_cook: "\uD83D\uDC69&zwj;\uD83C\uDF73",
        woman_facepalming: "\uD83E\uDD26&zwj;\u2640\uFE0F",
        woman_factory_worker: "\uD83D\uDC69&zwj;\uD83C\uDFED",
        woman_farmer: "\uD83D\uDC69&zwj;\uD83C\uDF3E",
        woman_firefighter: "\uD83D\uDC69&zwj;\uD83D\uDE92",
        woman_health_worker: "\uD83D\uDC69&zwj;\u2695\uFE0F",
        woman_judge: "\uD83D\uDC69&zwj;\u2696\uFE0F",
        woman_juggling: "\uD83E\uDD39&zwj;\u2640\uFE0F",
        woman_mechanic: "\uD83D\uDC69&zwj;\uD83D\uDD27",
        woman_office_worker: "\uD83D\uDC69&zwj;\uD83D\uDCBC",
        woman_pilot: "\uD83D\uDC69&zwj;\u2708\uFE0F",
        woman_playing_handball: "\uD83E\uDD3E&zwj;\u2640\uFE0F",
        woman_playing_water_polo: "\uD83E\uDD3D&zwj;\u2640\uFE0F",
        woman_scientist: "\uD83D\uDC69&zwj;\uD83D\uDD2C",
        woman_shrugging: "\uD83E\uDD37&zwj;\u2640\uFE0F",
        woman_singer: "\uD83D\uDC69&zwj;\uD83C\uDFA4",
        woman_student: "\uD83D\uDC69&zwj;\uD83C\uDF93",
        woman_teacher: "\uD83D\uDC69&zwj;\uD83C\uDFEB",
        woman_technologist: "\uD83D\uDC69&zwj;\uD83D\uDCBB",
        woman_with_turban: "\uD83D\uDC73&zwj;\u2640\uFE0F",
        womans_clothes: "\uD83D\uDC5A",
        womans_hat: "\uD83D\uDC52",
        women_wrestling: "\uD83E\uDD3C&zwj;\u2640\uFE0F",
        womens: "\uD83D\uDEBA",
        world_map: "\uD83D\uDDFA",
        worried: "\uD83D\uDE1F",
        wrench: "\uD83D\uDD27",
        writing_hand: "\u270D\uFE0F",
        x: "\u274C",
        yellow_heart: "\uD83D\uDC9B",
        yen: "\uD83D\uDCB4",
        yin_yang: "\u262F\uFE0F",
        yum: "\uD83D\uDE0B",
        zap: "\u26A1\uFE0F",
        zipper_mouth_face: "\uD83E\uDD10",
        zzz: "\uD83D\uDCA4",
        octocat: '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
        showdown: "<span style=\"font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>"
    }, x.Converter = function(e) {
        "use strict";
        var r, t, n = {}, i = [], l = [], o = {}, a = h, s = {
            parsed: {},
            raw: "",
            format: ""
        };
        for(r in e = e || {}, p)p.hasOwnProperty(r) && (n[r] = p[r]);
        if ("object" != typeof e) throw Error("Converter expects the passed parameter to be an object, but " + typeof e + " was passed instead.");
        for(t in e)e.hasOwnProperty(t) && (n[t] = e[t]);
        function c(e, r) {
            if (r = r || null, x.helper.isString(e)) {
                if (r = e = x.helper.stdExtName(e), x.extensions[e]) {
                    console.warn("DEPRECATION WARNING: " + e + " is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!");
                    var t = x.extensions[e], a = e;
                    if ("function" == typeof t && (t = t(new x.Converter)), x.helper.isArray(t) || (t = [
                        t
                    ]), !(a = g(t, a)).valid) throw Error(a.error);
                    for(var n = 0; n < t.length; ++n)switch(t[n].type){
                        case "lang":
                            i.push(t[n]);
                            break;
                        case "output":
                            l.push(t[n]);
                            break;
                        default:
                            throw Error("Extension loader error: Type unrecognized!!!");
                    }
                    return;
                }
                if (x.helper.isUndefined(d[e])) throw Error('Extension "' + e + '" could not be loaded. It was either not found or is not a valid extension.');
                e = d[e];
            }
            "function" == typeof e && (e = e());
            a = g(e = x.helper.isArray(e) ? e : [
                e
            ], r);
            if (!a.valid) throw Error(a.error);
            for(var s = 0; s < e.length; ++s){
                switch(e[s].type){
                    case "lang":
                        i.push(e[s]);
                        break;
                    case "output":
                        l.push(e[s]);
                }
                if (e[s].hasOwnProperty("listeners")) for(var o in e[s].listeners)e[s].listeners.hasOwnProperty(o) && u(o, e[s].listeners[o]);
            }
        }
        function u(e, r) {
            if (!x.helper.isString(e)) throw Error("Invalid argument in converter.listen() method: name must be a string, but " + typeof e + " given");
            if ("function" != typeof r) throw Error("Invalid argument in converter.listen() method: callback must be a function, but " + typeof r + " given");
            o.hasOwnProperty(e) || (o[e] = []), o[e].push(r);
        }
        n.extensions && x.helper.forEach(n.extensions, c), this._dispatch = function(e, r, t, a) {
            if (o.hasOwnProperty(e)) for(var n = 0; n < o[e].length; ++n){
                var s = o[e][n](e, r, this, t, a);
                s && void 0 !== s && (r = s);
            }
            return r;
        }, this.listen = function(e, r) {
            return u(e, r), this;
        }, this.makeHtml = function(r) {
            if (!r) return r;
            var e, t, a = {
                gHtmlBlocks: [],
                gHtmlMdBlocks: [],
                gHtmlSpans: [],
                gUrls: {},
                gTitles: {},
                gDimensions: {},
                gListLevel: 0,
                hashLinkCounts: {},
                langExtensions: i,
                outputModifiers: l,
                converter: this,
                ghCodeBlocks: [],
                metadata: {
                    parsed: {},
                    raw: "",
                    format: ""
                }
            };
            return r = (r = (r = (r = (r = r.replace(/¨/g, "\xa8T")).replace(/\$/g, "\xa8D")).replace(/\r\n/g, "\n")).replace(/\r/g, "\n")).replace(/\u00A0/g, "&nbsp;"), n.smartIndentationFix && (t = (e = r).match(/^\s*/)[0].length, t = new RegExp("^\\s{0," + t + "}", "gm"), r = e.replace(t, "")), r = "\n\n" + r + "\n\n", r = (r = x.subParser("detab")(r, n, a)).replace(/^[ \t]+$/gm, ""), x.helper.forEach(i, function(e) {
                r = x.subParser("runExtension")(e, r, n, a);
            }), r = x.subParser("metadata")(r, n, a), r = x.subParser("hashPreCodeTags")(r, n, a), r = x.subParser("githubCodeBlocks")(r, n, a), r = x.subParser("hashHTMLBlocks")(r, n, a), r = x.subParser("hashCodeTags")(r, n, a), r = x.subParser("stripLinkDefinitions")(r, n, a), r = x.subParser("blockGamut")(r, n, a), r = x.subParser("unhashHTMLSpans")(r, n, a), r = (r = (r = x.subParser("unescapeSpecialChars")(r, n, a)).replace(/¨D/g, "$$")).replace(/¨T/g, "\xa8"), r = x.subParser("completeHTMLDocument")(r, n, a), x.helper.forEach(l, function(e) {
                r = x.subParser("runExtension")(e, r, n, a);
            }), s = a.metadata, r;
        }, this.makeMarkdown = this.makeMd = function(e, r) {
            if (e = (e = (e = e.replace(/\r\n/g, "\n")).replace(/\r/g, "\n")).replace(/>[ \t]+</, ">\xa8NBSP;<"), !r) {
                if (!window || !window.document) throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");
                r = window.document;
            }
            for(var r = r.createElement("div"), t = (r.innerHTML = e, {
                preList: function(e) {
                    for(var r = e.querySelectorAll("pre"), t = [], a = 0; a < r.length; ++a)if (1 === r[a].childElementCount && "code" === r[a].firstChild.tagName.toLowerCase()) {
                        var n = r[a].firstChild.innerHTML.trim(), s = r[a].firstChild.getAttribute("data-language") || "";
                        if ("" === s) for(var o = r[a].firstChild.className.split(" "), i = 0; i < o.length; ++i){
                            var l = o[i].match(/^language-(.+)$/);
                            if (null !== l) {
                                s = l[1];
                                break;
                            }
                        }
                        n = x.helper.unescapeHTMLEntities(n), t.push(n), r[a].outerHTML = '<precode language="' + s + '" precodenum="' + a.toString() + '"></precode>';
                    } else t.push(r[a].innerHTML), r[a].innerHTML = "", r[a].setAttribute("prenum", a.toString());
                    return t;
                }(r)
            }), a = (!function e(r) {
                for(var t = 0; t < r.childNodes.length; ++t){
                    var a = r.childNodes[t];
                    3 === a.nodeType ? /\S/.test(a.nodeValue) || /^[ ]+$/.test(a.nodeValue) ? (a.nodeValue = a.nodeValue.split("\n").join(" "), a.nodeValue = a.nodeValue.replace(/(\s)+/g, "$1")) : (r.removeChild(a), --t) : 1 === a.nodeType && e(a);
                }
            }(r), r.childNodes), n = "", s = 0; s < a.length; s++)n += x.subParser("makeMarkdown.node")(a[s], t);
            return n;
        }, this.setOption = function(e, r) {
            n[e] = r;
        }, this.getOption = function(e) {
            return n[e];
        }, this.getOptions = function() {
            return n;
        }, this.addExtension = function(e, r) {
            c(e, r = r || null);
        }, this.useExtension = function(e) {
            c(e);
        }, this.setFlavor = function(e) {
            if (!_.hasOwnProperty(e)) throw Error(e + " flavor was not found");
            var r, t = _[e];
            for(r in a = e, t)t.hasOwnProperty(r) && (n[r] = t[r]);
        }, this.getFlavor = function() {
            return a;
        }, this.removeExtension = function(e) {
            x.helper.isArray(e) || (e = [
                e
            ]);
            for(var r = 0; r < e.length; ++r){
                for(var t = e[r], a = 0; a < i.length; ++a)i[a] === t && i.splice(a, 1);
                for(var n = 0; n < l.length; ++n)l[n] === t && l.splice(n, 1);
            }
        }, this.getAllExtensions = function() {
            return {
                language: i,
                output: l
            };
        }, this.getMetadata = function(e) {
            return e ? s.raw : s.parsed;
        }, this.getMetadataFormat = function() {
            return s.format;
        }, this._setMetadataPair = function(e, r) {
            s.parsed[e] = r;
        }, this._setMetadataFormat = function(e) {
            s.format = e;
        }, this._setMetadataRaw = function(e) {
            s.raw = e;
        };
    }, x.subParser("anchors", function(e, i, l) {
        "use strict";
        function r(e, r, t, a, n, s, o) {
            if (x.helper.isUndefined(o) && (o = ""), t = t.toLowerCase(), -1 < e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)) a = "";
            else if (!a) {
                if (a = "#" + (t = t || r.toLowerCase().replace(/ ?\n/g, " ")), x.helper.isUndefined(l.gUrls[t])) return e;
                a = l.gUrls[t], x.helper.isUndefined(l.gTitles[t]) || (o = l.gTitles[t]);
            }
            return e = '<a href="' + (a = a.replace(x.helper.regexes.asteriskDashAndColon, x.helper.escapeCharactersCallback)) + '"', "" !== o && null !== o && (e += ' title="' + (o = (o = o.replace(/"/g, "&quot;")).replace(x.helper.regexes.asteriskDashAndColon, x.helper.escapeCharactersCallback)) + '"'), i.openLinksInNewWindow && !/^#/.test(a) && (e += ' rel="noopener noreferrer" target="\xa8E95Eblank"'), e += ">" + r + "</a>";
        }
        return e = (e = (e = (e = (e = l.converter._dispatch("anchors.before", e, i, l)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, r)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g, r)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g, r)).replace(/\[([^\[\]]+)]()()()()()/g, r), i.ghMentions && (e = e.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gim, function(e, r, t, a, n) {
            if ("\\" === t) return r + a;
            if (!x.helper.isString(i.ghMentionsLink)) throw new Error("ghMentionsLink option must be a string");
            t = "";
            return r + '<a href="' + i.ghMentionsLink.replace(/\{u}/g, n) + '"' + (t = i.openLinksInNewWindow ? ' rel="noopener noreferrer" target="\xa8E95Eblank"' : t) + ">" + a + "</a>";
        })), e = l.converter._dispatch("anchors.after", e, i, l);
    });
    var i = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi, l = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi, c = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi, m = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gim, f = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi;
    x.subParser("autoLinks", function(e, r, t) {
        "use strict";
        return e = (e = (e = t.converter._dispatch("autoLinks.before", e, r, t)).replace(c, s(r))).replace(f, o(r, t)), e = t.converter._dispatch("autoLinks.after", e, r, t);
    }), x.subParser("simplifiedAutoLinks", function(e, r, t) {
        "use strict";
        return r.simplifiedAutoLink ? (e = t.converter._dispatch("simplifiedAutoLinks.before", e, r, t), e = (e = r.excludeTrailingPunctuationFromURLs ? e.replace(l, s(r)) : e.replace(i, s(r))).replace(m, o(r, t)), t.converter._dispatch("simplifiedAutoLinks.after", e, r, t)) : e;
    }), x.subParser("blockGamut", function(e, r, t) {
        "use strict";
        return e = t.converter._dispatch("blockGamut.before", e, r, t), e = x.subParser("blockQuotes")(e, r, t), e = x.subParser("headers")(e, r, t), e = x.subParser("horizontalRule")(e, r, t), e = x.subParser("lists")(e, r, t), e = x.subParser("codeBlocks")(e, r, t), e = x.subParser("tables")(e, r, t), e = x.subParser("hashHTMLBlocks")(e, r, t), e = x.subParser("paragraphs")(e, r, t), e = t.converter._dispatch("blockGamut.after", e, r, t);
    }), x.subParser("blockQuotes", function(e, r, t) {
        "use strict";
        e = t.converter._dispatch("blockQuotes.before", e, r, t);
        var a = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;
        return r.splitAdjacentBlockquotes && (a = /^ {0,3}>[\s\S]*?(?:\n\n)/gm), e = (e += "\n\n").replace(a, function(e) {
            return e = (e = (e = e.replace(/^[ \t]*>[ \t]?/gm, "")).replace(/¨0/g, "")).replace(/^[ \t]+$/gm, ""), e = x.subParser("githubCodeBlocks")(e, r, t), e = (e = (e = x.subParser("blockGamut")(e, r, t)).replace(/(^|\n)/g, "$1  ")).replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function(e, r) {
                return r.replace(/^  /gm, "\xa80").replace(/¨0/g, "");
            }), x.subParser("hashBlock")("<blockquote>\n" + e + "\n</blockquote>", r, t);
        }), e = t.converter._dispatch("blockQuotes.after", e, r, t);
    }), x.subParser("codeBlocks", function(e, n, s) {
        "use strict";
        e = s.converter._dispatch("codeBlocks.before", e, n, s);
        return e = (e = (e += "\xa80").replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g, function(e, r, t) {
            var a = "\n", r = x.subParser("outdent")(r, n, s);
            return r = x.subParser("encodeCode")(r, n, s), r = "<pre><code>" + (r = (r = (r = x.subParser("detab")(r, n, s)).replace(/^\n+/g, "")).replace(/\n+$/g, "")) + (a = n.omitExtraWLInCodeBlocks ? "" : a) + "</code></pre>", x.subParser("hashBlock")(r, n, s) + t;
        })).replace(/¨0/, ""), e = s.converter._dispatch("codeBlocks.after", e, n, s);
    }), x.subParser("codeSpans", function(e, n, s) {
        "use strict";
        return e = (e = void 0 === (e = s.converter._dispatch("codeSpans.before", e, n, s)) ? "" : e).replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm, function(e, r, t, a) {
            return a = (a = a.replace(/^([ \t]*)/g, "")).replace(/[ \t]*$/g, ""), a = r + "<code>" + (a = x.subParser("encodeCode")(a, n, s)) + "</code>", a = x.subParser("hashHTMLSpans")(a, n, s);
        }), e = s.converter._dispatch("codeSpans.after", e, n, s);
    }), x.subParser("completeHTMLDocument", function(e, r, t) {
        "use strict";
        if (!r.completeHTMLDocument) return e;
        e = t.converter._dispatch("completeHTMLDocument.before", e, r, t);
        var a, n = "html", s = "<!DOCTYPE HTML>\n", o = "", i = '<meta charset="utf-8">\n', l = "", c = "";
        for(a in void 0 !== t.metadata.parsed.doctype && (s = "<!DOCTYPE " + t.metadata.parsed.doctype + ">\n", "html" !== (n = t.metadata.parsed.doctype.toString().toLowerCase()) && "html5" !== n || (i = '<meta charset="utf-8">')), t.metadata.parsed)if (t.metadata.parsed.hasOwnProperty(a)) switch(a.toLowerCase()){
            case "doctype":
                break;
            case "title":
                o = "<title>" + t.metadata.parsed.title + "</title>\n";
                break;
            case "charset":
                i = "html" === n || "html5" === n ? '<meta charset="' + t.metadata.parsed.charset + '">\n' : '<meta name="charset" content="' + t.metadata.parsed.charset + '">\n';
                break;
            case "language":
            case "lang":
                l = ' lang="' + t.metadata.parsed[a] + '"', c += '<meta name="' + a + '" content="' + t.metadata.parsed[a] + '">\n';
                break;
            default:
                c += '<meta name="' + a + '" content="' + t.metadata.parsed[a] + '">\n';
        }
        return e = s + "<html" + l + ">\n<head>\n" + o + i + c + "</head>\n<body>\n" + e.trim() + "\n</body>\n</html>", e = t.converter._dispatch("completeHTMLDocument.after", e, r, t);
    }), x.subParser("detab", function(e, r, t) {
        "use strict";
        return e = (e = (e = (e = (e = (e = t.converter._dispatch("detab.before", e, r, t)).replace(/\t(?=\t)/g, "    ")).replace(/\t/g, "\xa8A\xa8B")).replace(/¨B(.+?)¨A/g, function(e, r) {
            for(var t = r, a = 4 - t.length % 4, n = 0; n < a; n++)t += " ";
            return t;
        })).replace(/¨A/g, "    ")).replace(/¨B/g, ""), e = t.converter._dispatch("detab.after", e, r, t);
    }), x.subParser("ellipsis", function(e, r, t) {
        "use strict";
        return r.ellipsis ? (e = (e = t.converter._dispatch("ellipsis.before", e, r, t)).replace(/\.\.\./g, "\u2026"), t.converter._dispatch("ellipsis.after", e, r, t)) : e;
    }), x.subParser("emoji", function(e, r, t) {
        "use strict";
        if (!r.emoji) return e;
        return e = (e = t.converter._dispatch("emoji.before", e, r, t)).replace(/:([\S]+?):/g, function(e, r) {
            return x.helper.emojis.hasOwnProperty(r) ? x.helper.emojis[r] : e;
        }), e = t.converter._dispatch("emoji.after", e, r, t);
    }), x.subParser("encodeAmpsAndAngles", function(e, r, t) {
        "use strict";
        return e = (e = (e = (e = (e = t.converter._dispatch("encodeAmpsAndAngles.before", e, r, t)).replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, "&amp;")).replace(/<(?![a-z\/?$!])/gi, "&lt;")).replace(/</g, "&lt;")).replace(/>/g, "&gt;"), e = t.converter._dispatch("encodeAmpsAndAngles.after", e, r, t);
    }), x.subParser("encodeBackslashEscapes", function(e, r, t) {
        "use strict";
        return e = (e = (e = t.converter._dispatch("encodeBackslashEscapes.before", e, r, t)).replace(/\\(\\)/g, x.helper.escapeCharactersCallback)).replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g, x.helper.escapeCharactersCallback), e = t.converter._dispatch("encodeBackslashEscapes.after", e, r, t);
    }), x.subParser("encodeCode", function(e, r, t) {
        "use strict";
        return e = (e = t.converter._dispatch("encodeCode.before", e, r, t)).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/([*_{}\[\]\\=~-])/g, x.helper.escapeCharactersCallback), e = t.converter._dispatch("encodeCode.after", e, r, t);
    }), x.subParser("escapeSpecialCharsWithinTagAttributes", function(e, r, t) {
        "use strict";
        return e = (e = (e = t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before", e, r, t)).replace(/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi, function(e) {
            return e.replace(/(.)<\/?code>(?=.)/g, "$1`").replace(/([\\`*_~=|])/g, x.helper.escapeCharactersCallback);
        })).replace(/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi, function(e) {
            return e.replace(/([\\`*_~=|])/g, x.helper.escapeCharactersCallback);
        }), e = t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after", e, r, t);
    }), x.subParser("githubCodeBlocks", function(e, s, o) {
        "use strict";
        return s.ghCodeBlocks ? (e = o.converter._dispatch("githubCodeBlocks.before", e, s, o), e = (e = (e += "\xa80").replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function(e, r, t, a) {
            var n = s.omitExtraWLInCodeBlocks ? "" : "\n";
            return a = x.subParser("encodeCode")(a, s, o), a = "<pre><code" + (t ? ' class="' + t + " language-" + t + '"' : "") + ">" + (a = (a = (a = x.subParser("detab")(a, s, o)).replace(/^\n+/g, "")).replace(/\n+$/g, "")) + n + "</code></pre>", a = x.subParser("hashBlock")(a, s, o), "\n\n\xa8G" + (o.ghCodeBlocks.push({
                text: e,
                codeblock: a
            }) - 1) + "G\n\n";
        })).replace(/¨0/, ""), o.converter._dispatch("githubCodeBlocks.after", e, s, o)) : e;
    }), x.subParser("hashBlock", function(e, r, t) {
        "use strict";
        return e = (e = t.converter._dispatch("hashBlock.before", e, r, t)).replace(/(^\n+|\n+$)/g, ""), e = "\n\n\xa8K" + (t.gHtmlBlocks.push(e) - 1) + "K\n\n", e = t.converter._dispatch("hashBlock.after", e, r, t);
    }), x.subParser("hashCodeTags", function(e, n, s) {
        "use strict";
        e = s.converter._dispatch("hashCodeTags.before", e, n, s);
        return e = x.helper.replaceRecursiveRegExp(e, function(e, r, t, a) {
            t = t + x.subParser("encodeCode")(r, n, s) + a;
            return "\xa8C" + (s.gHtmlSpans.push(t) - 1) + "C";
        }, "<code\\b[^>]*>", "</code>", "gim"), e = s.converter._dispatch("hashCodeTags.after", e, n, s);
    }), x.subParser("hashElement", function(e, r, t) {
        "use strict";
        return function(e, r) {
            return r = (r = (r = r.replace(/\n\n/g, "\n")).replace(/^\n/, "")).replace(/\n+$/g, ""), r = "\n\n\xa8K" + (t.gHtmlBlocks.push(r) - 1) + "K\n\n";
        };
    }), x.subParser("hashHTMLBlocks", function(e, r, n) {
        "use strict";
        e = n.converter._dispatch("hashHTMLBlocks.before", e, r, n);
        function t(e, r, t, a) {
            return -1 !== t.search(/\bmarkdown\b/) && (e = t + n.converter.makeHtml(r) + a), "\n\n\xa8K" + (n.gHtmlBlocks.push(e) - 1) + "K\n\n";
        }
        var a = [
            "pre",
            "div",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "blockquote",
            "table",
            "dl",
            "ol",
            "ul",
            "script",
            "noscript",
            "form",
            "fieldset",
            "iframe",
            "math",
            "style",
            "section",
            "header",
            "footer",
            "nav",
            "article",
            "aside",
            "address",
            "audio",
            "canvas",
            "figure",
            "hgroup",
            "output",
            "video",
            "p"
        ];
        r.backslashEscapesHTMLTags && (e = e.replace(/\\<(\/?[^>]+?)>/g, function(e, r) {
            return "&lt;" + r + "&gt;";
        }));
        for(var s = 0; s < a.length; ++s)for(var o = new RegExp("^ {0,3}(<" + a[s] + "\\b[^>]*>)", "im"), i = "<" + a[s] + "\\b[^>]*>", l = "</" + a[s] + ">"; -1 !== (c = x.helper.regexIndexOf(e, o));){
            var c = x.helper.splitAtIndex(e, c), u = x.helper.replaceRecursiveRegExp(c[1], t, i, l, "im");
            if (u === c[1]) break;
            e = c[0].concat(u);
        }
        return e = e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g, x.subParser("hashElement")(e, r, n)), e = (e = x.helper.replaceRecursiveRegExp(e, function(e) {
            return "\n\n\xa8K" + (n.gHtmlBlocks.push(e) - 1) + "K\n\n";
        }, "^ {0,3}<!--", "-->", "gm")).replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g, x.subParser("hashElement")(e, r, n)), e = n.converter._dispatch("hashHTMLBlocks.after", e, r, n);
    }), x.subParser("hashHTMLSpans", function(e, r, t) {
        "use strict";
        function a(e) {
            return "\xa8C" + (t.gHtmlSpans.push(e) - 1) + "C";
        }
        return e = (e = (e = (e = (e = t.converter._dispatch("hashHTMLSpans.before", e, r, t)).replace(/<[^>]+?\/>/gi, a)).replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, a)).replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, a)).replace(/<[^>]+?>/gi, a), e = t.converter._dispatch("hashHTMLSpans.after", e, r, t);
    }), x.subParser("unhashHTMLSpans", function(e, r, t) {
        "use strict";
        e = t.converter._dispatch("unhashHTMLSpans.before", e, r, t);
        for(var a = 0; a < t.gHtmlSpans.length; ++a){
            for(var n = t.gHtmlSpans[a], s = 0; /¨C(\d+)C/.test(n);){
                var o = RegExp.$1, n = n.replace("\xa8C" + o + "C", t.gHtmlSpans[o]);
                if (10 === s) {
                    console.error("maximum nesting of 10 spans reached!!!");
                    break;
                }
                ++s;
            }
            e = e.replace("\xa8C" + a + "C", n);
        }
        return e = t.converter._dispatch("unhashHTMLSpans.after", e, r, t);
    }), x.subParser("hashPreCodeTags", function(e, n, s) {
        "use strict";
        e = s.converter._dispatch("hashPreCodeTags.before", e, n, s);
        return e = x.helper.replaceRecursiveRegExp(e, function(e, r, t, a) {
            t = t + x.subParser("encodeCode")(r, n, s) + a;
            return "\n\n\xa8G" + (s.ghCodeBlocks.push({
                text: e,
                codeblock: t
            }) - 1) + "G\n\n";
        }, "^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>", "^ {0,3}</code>\\s*</pre>", "gim"), e = s.converter._dispatch("hashPreCodeTags.after", e, n, s);
    }), x.subParser("headers", function(e, n, s) {
        "use strict";
        e = s.converter._dispatch("headers.before", e, n, s);
        var o = isNaN(parseInt(n.headerLevelStart)) ? 1 : parseInt(n.headerLevelStart), r = n.smoothLivePreview ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm, t = n.smoothLivePreview ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm, r = (e = (e = e.replace(r, function(e, r) {
            var t = x.subParser("spanGamut")(r, n, s), r = n.noHeaderId ? "" : ' id="' + i(r) + '"', r = "<h" + o + r + ">" + t + "</h" + o + ">";
            return x.subParser("hashBlock")(r, n, s);
        })).replace(t, function(e, r) {
            var t = x.subParser("spanGamut")(r, n, s), r = n.noHeaderId ? "" : ' id="' + i(r) + '"', a = o + 1, r = "<h" + a + r + ">" + t + "</h" + a + ">";
            return x.subParser("hashBlock")(r, n, s);
        }), n.requireSpaceBeforeHeadingText ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm);
        function i(e) {
            var r = e = n.customizedHeaderId && (r = e.match(/\{([^{]+?)}\s*$/)) && r[1] ? r[1] : e, e = x.helper.isString(n.prefixHeaderId) ? n.prefixHeaderId : !0 === n.prefixHeaderId ? "section-" : "";
            return n.rawPrefixHeaderId || (r = e + r), r = (n.ghCompatibleHeaderId ? r.replace(/ /g, "-").replace(/&amp;/g, "").replace(/¨T/g, "").replace(/¨D/g, "").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, "") : n.rawHeaderId ? r.replace(/ /g, "-").replace(/&amp;/g, "&").replace(/¨T/g, "\xa8").replace(/¨D/g, "$").replace(/["']/g, "-") : r.replace(/[^\w]/g, "")).toLowerCase(), n.rawPrefixHeaderId && (r = e + r), s.hashLinkCounts[r] ? r = r + "-" + s.hashLinkCounts[r]++ : s.hashLinkCounts[r] = 1, r;
        }
        return e = e.replace(r, function(e, r, t) {
            var a = t, a = (n.customizedHeaderId && (a = t.replace(/\s?\{([^{]+?)}\s*$/, "")), x.subParser("spanGamut")(a, n, s)), t = n.noHeaderId ? "" : ' id="' + i(t) + '"', r = o - 1 + r.length, t = "<h" + r + t + ">" + a + "</h" + r + ">";
            return x.subParser("hashBlock")(t, n, s);
        }), e = s.converter._dispatch("headers.after", e, n, s);
    }), x.subParser("horizontalRule", function(e, r, t) {
        "use strict";
        e = t.converter._dispatch("horizontalRule.before", e, r, t);
        var a = x.subParser("hashBlock")("<hr />", r, t);
        return e = (e = (e = e.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, a)).replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, a)).replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, a), e = t.converter._dispatch("horizontalRule.after", e, r, t);
    }), x.subParser("images", function(e, r, d) {
        "use strict";
        function l(e, r, t, a, n, s, o, i) {
            var l = d.gUrls, c = d.gTitles, u = d.gDimensions;
            if (t = t.toLowerCase(), i = i || "", -1 < e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)) a = "";
            else if ("" === a || null === a) {
                if (a = "#" + (t = "" !== t && null !== t ? t : r.toLowerCase().replace(/ ?\n/g, " ")), x.helper.isUndefined(l[t])) return e;
                a = l[t], x.helper.isUndefined(c[t]) || (i = c[t]), x.helper.isUndefined(u[t]) || (n = u[t].width, s = u[t].height);
            }
            r = r.replace(/"/g, "&quot;").replace(x.helper.regexes.asteriskDashAndColon, x.helper.escapeCharactersCallback);
            e = '<img src="' + (a = a.replace(x.helper.regexes.asteriskDashAndColon, x.helper.escapeCharactersCallback)) + '" alt="' + r + '"';
            return i && x.helper.isString(i) && (e += ' title="' + (i = i.replace(/"/g, "&quot;").replace(x.helper.regexes.asteriskDashAndColon, x.helper.escapeCharactersCallback)) + '"'), n && s && (e = e + (' width="' + (n = "*" === n ? "auto" : n)) + '" height="' + (s = "*" === s ? "auto" : s) + '"'), e += " />";
        }
        return e = (e = (e = (e = (e = (e = d.converter._dispatch("images.before", e, r, d)).replace(/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g, l)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, function(e, r, t, a, n, s, o, i) {
            return l(e, r, t, a = a.replace(/\s/g, ""), n, s, 0, i);
        })).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g, l)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, l)).replace(/!\[([^\[\]]+)]()()()()()/g, l), e = d.converter._dispatch("images.after", e, r, d);
    }), x.subParser("italicsAndBold", function(e, r, t) {
        "use strict";
        return e = t.converter._dispatch("italicsAndBold.before", e, r, t), e = r.literalMidWordUnderscores ? (e = (e = e.replace(/\b___(\S[\s\S]*?)___\b/g, function(e, r) {
            return "<strong><em>" + r + "</em></strong>";
        })).replace(/\b__(\S[\s\S]*?)__\b/g, function(e, r) {
            return "<strong>" + r + "</strong>";
        })).replace(/\b_(\S[\s\S]*?)_\b/g, function(e, r) {
            return "<em>" + r + "</em>";
        }) : (e = (e = e.replace(/___(\S[\s\S]*?)___/g, function(e, r) {
            return /\S$/.test(r) ? "<strong><em>" + r + "</em></strong>" : e;
        })).replace(/__(\S[\s\S]*?)__/g, function(e, r) {
            return /\S$/.test(r) ? "<strong>" + r + "</strong>" : e;
        })).replace(/_([^\s_][\s\S]*?)_/g, function(e, r) {
            return /\S$/.test(r) ? "<em>" + r + "</em>" : e;
        }), e = r.literalMidWordAsterisks ? (e = (e = e.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function(e, r, t) {
            return r + "<strong><em>" + t + "</em></strong>";
        })).replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function(e, r, t) {
            return r + "<strong>" + t + "</strong>";
        })).replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function(e, r, t) {
            return r + "<em>" + t + "</em>";
        }) : (e = (e = e.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function(e, r) {
            return /\S$/.test(r) ? "<strong><em>" + r + "</em></strong>" : e;
        })).replace(/\*\*(\S[\s\S]*?)\*\*/g, function(e, r) {
            return /\S$/.test(r) ? "<strong>" + r + "</strong>" : e;
        })).replace(/\*([^\s*][\s\S]*?)\*/g, function(e, r) {
            return /\S$/.test(r) ? "<em>" + r + "</em>" : e;
        }), e = t.converter._dispatch("italicsAndBold.after", e, r, t);
    }), x.subParser("lists", function(e, d, c) {
        "use strict";
        function p(e, r) {
            c.gListLevel++, e = e.replace(/\n{2,}$/, "\n");
            var t = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm, l = /\n[ \t]*\n(?!¨0)/.test(e += "\xa80");
            return d.disableForced4SpacesIndentedSublists && (t = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm), e = (e = e.replace(t, function(e, r, t, a, n, s, o) {
                o = o && "" !== o.trim();
                var n = x.subParser("outdent")(n, d, c), i = "";
                return s && d.tasklists && (i = ' class="task-list-item" style="list-style-type: none;"', n = n.replace(/^[ \t]*\[(x|X| )?]/m, function() {
                    var e = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
                    return o && (e += " checked"), e += ">";
                })), n = n.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function(e) {
                    return "\xa8A" + e;
                }), n = "<li" + i + ">" + (n = (n = r || -1 < n.search(/\n{2,}/) ? (n = x.subParser("githubCodeBlocks")(n, d, c), x.subParser("blockGamut")(n, d, c)) : (n = (n = x.subParser("lists")(n, d, c)).replace(/\n$/, ""), n = (n = x.subParser("hashHTMLBlocks")(n, d, c)).replace(/\n\n+/g, "\n\n"), (l ? x.subParser("paragraphs") : x.subParser("spanGamut"))(n, d, c))).replace("\xa8A", "")) + "</li>\n";
            })).replace(/¨0/g, ""), c.gListLevel--, e = r ? e.replace(/\s+$/, "") : e;
        }
        function h(e, r) {
            if ("ol" === r) {
                r = e.match(/^ *(\d+)\./);
                if (r && "1" !== r[1]) return ' start="' + r[1] + '"';
            }
            return "";
        }
        function n(n, s, o) {
            var e, i = d.disableForced4SpacesIndentedSublists ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm, l = d.disableForced4SpacesIndentedSublists ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm, c = "ul" === s ? i : l, u = "";
            return -1 !== n.search(c) ? function e(r) {
                var t = r.search(c), a = h(n, s);
                -1 !== t ? (u += "\n\n<" + s + a + ">\n" + p(r.slice(0, t), !!o) + "</" + s + ">\n", c = "ul" === (s = "ul" === s ? "ol" : "ul") ? i : l, e(r.slice(t))) : u += "\n\n<" + s + a + ">\n" + p(r, !!o) + "</" + s + ">\n";
            }(n) : (e = h(n, s), u = "\n\n<" + s + e + ">\n" + p(n, !!o) + "</" + s + ">\n"), u;
        }
        return e = c.converter._dispatch("lists.before", e, d, c), e += "\xa80", e = (e = c.gListLevel ? e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm, function(e, r, t) {
            return n(r, -1 < t.search(/[*+-]/g) ? "ul" : "ol", !0);
        }) : e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm, function(e, r, t, a) {
            return n(t, -1 < a.search(/[*+-]/g) ? "ul" : "ol", !1);
        })).replace(/¨0/, ""), e = c.converter._dispatch("lists.after", e, d, c);
    }), x.subParser("metadata", function(e, r, a) {
        "use strict";
        return r.metadata ? (e = (e = (e = (e = a.converter._dispatch("metadata.before", e, r, a)).replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function(e, r, t) {
            return n(t), "\xa8M";
        })).replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function(e, r, t) {
            return r && (a.metadata.format = r), n(t), "\xa8M";
        })).replace(/¨M/g, ""), a.converter._dispatch("metadata.after", e, r, a)) : e;
        function n(e) {
            (e = (e = (a.metadata.raw = e).replace(/&/g, "&amp;").replace(/"/g, "&quot;")).replace(/\n {4}/g, " ")).replace(/^([\S ]+): +([\s\S]+?)$/gm, function(e, r, t) {
                return a.metadata.parsed[r] = t, "";
            });
        }
    }), x.subParser("outdent", function(e, r, t) {
        "use strict";
        return e = (e = (e = t.converter._dispatch("outdent.before", e, r, t)).replace(/^(\t|[ ]{1,4})/gm, "\xa80")).replace(/¨0/g, ""), e = t.converter._dispatch("outdent.after", e, r, t);
    }), x.subParser("paragraphs", function(e, r, t) {
        "use strict";
        for(var a = (e = (e = (e = t.converter._dispatch("paragraphs.before", e, r, t)).replace(/^\n+/g, "")).replace(/\n+$/g, "")).split(/\n{2,}/g), n = [], s = a.length, o = 0; o < s; o++){
            var i = a[o];
            0 <= i.search(/¨(K|G)(\d+)\1/g) ? n.push(i) : 0 <= i.search(/\S/) && (i = (i = x.subParser("spanGamut")(i, r, t)).replace(/^([ \t]*)/g, "<p>"), i += "</p>", n.push(i));
        }
        for(s = n.length, o = 0; o < s; o++){
            for(var l = "", c = n[o], u = !1; /¨(K|G)(\d+)\1/.test(c);){
                var d = RegExp.$1, p = RegExp.$2;
                l = (l = "K" === d ? t.gHtmlBlocks[p] : u ? x.subParser("encodeCode")(t.ghCodeBlocks[p].text, r, t) : t.ghCodeBlocks[p].codeblock).replace(/\$/g, "$$$$"), c = c.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, l), /^<pre\b[^>]*>\s*<code\b[^>]*>/.test(c) && (u = !0);
            }
            n[o] = c;
        }
        return e = (e = (e = n.join("\n")).replace(/^\n+/g, "")).replace(/\n+$/g, ""), t.converter._dispatch("paragraphs.after", e, r, t);
    }), x.subParser("runExtension", function(e, r, t, a) {
        "use strict";
        return e.filter ? r = e.filter(r, a.converter, t) : e.regex && ((a = e.regex) instanceof RegExp || (a = new RegExp(a, "g")), r = r.replace(a, e.replace)), r;
    }), x.subParser("spanGamut", function(e, r, t) {
        "use strict";
        return e = t.converter._dispatch("spanGamut.before", e, r, t), e = x.subParser("codeSpans")(e, r, t), e = x.subParser("escapeSpecialCharsWithinTagAttributes")(e, r, t), e = x.subParser("encodeBackslashEscapes")(e, r, t), e = x.subParser("images")(e, r, t), e = x.subParser("anchors")(e, r, t), e = x.subParser("autoLinks")(e, r, t), e = x.subParser("simplifiedAutoLinks")(e, r, t), e = x.subParser("emoji")(e, r, t), e = x.subParser("underline")(e, r, t), e = x.subParser("italicsAndBold")(e, r, t), e = x.subParser("strikethrough")(e, r, t), e = x.subParser("ellipsis")(e, r, t), e = x.subParser("hashHTMLSpans")(e, r, t), e = x.subParser("encodeAmpsAndAngles")(e, r, t), r.simpleLineBreaks ? /\n\n¨K/.test(e) || (e = e.replace(/\n+/g, "<br />\n")) : e = e.replace(/  +\n/g, "<br />\n"), e = t.converter._dispatch("spanGamut.after", e, r, t);
    }), x.subParser("strikethrough", function(e, t, a) {
        "use strict";
        return t.strikethrough && (e = (e = a.converter._dispatch("strikethrough.before", e, t, a)).replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function(e, r) {
            return r, "<del>" + (r = t.simplifiedAutoLink ? x.subParser("simplifiedAutoLinks")(r, t, a) : r) + "</del>";
        }), e = a.converter._dispatch("strikethrough.after", e, t, a)), e;
    }), x.subParser("stripLinkDefinitions", function(i, l, c) {
        "use strict";
        function e(e, r, t, a, n, s, o) {
            return r = r.toLowerCase(), i.toLowerCase().split(r).length - 1 < 2 ? e : (t.match(/^data:.+?\/.+?;base64,/) ? c.gUrls[r] = t.replace(/\s/g, "") : c.gUrls[r] = x.subParser("encodeAmpsAndAngles")(t, l, c), s ? s + o : (o && (c.gTitles[r] = o.replace(/"|'/g, "&quot;")), l.parseImgDimensions && a && n && (c.gDimensions[r] = {
                width: a,
                height: n
            }), ""));
        }
        return i = (i = (i = (i += "\xa80").replace(/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm, e)).replace(/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm, e)).replace(/¨0/, "");
    }), x.subParser("tables", function(e, y, P) {
        "use strict";
        if (!y.tables) return e;
        function r(e) {
            for(var r = e.split("\n"), t = 0; t < r.length; ++t)/^ {0,3}\|/.test(r[t]) && (r[t] = r[t].replace(/^ {0,3}\|/, "")), /\|[ \t]*$/.test(r[t]) && (r[t] = r[t].replace(/\|[ \t]*$/, "")), r[t] = x.subParser("codeSpans")(r[t], y, P);
            var a, n, s, o, i, l = r[0].split("|").map(function(e) {
                return e.trim();
            }), c = r[1].split("|").map(function(e) {
                return e.trim();
            }), u = [], d = [], p = [], h = [];
            for(r.shift(), r.shift(), t = 0; t < r.length; ++t)"" !== r[t].trim() && u.push(r[t].split("|").map(function(e) {
                return e.trim();
            }));
            if (l.length < c.length) return e;
            for(t = 0; t < c.length; ++t)p.push((a = c[t], /^:[ \t]*--*$/.test(a) ? ' style="text-align:left;"' : /^--*[ \t]*:[ \t]*$/.test(a) ? ' style="text-align:right;"' : /^:[ \t]*--*[ \t]*:$/.test(a) ? ' style="text-align:center;"' : ""));
            for(t = 0; t < l.length; ++t)x.helper.isUndefined(p[t]) && (p[t] = ""), d.push((n = l[t], s = p[t], o = "", n = n.trim(), "<th" + (o = y.tablesHeaderId || y.tableHeaderId ? ' id="' + n.replace(/ /g, "_").toLowerCase() + '"' : o) + s + ">" + (n = x.subParser("spanGamut")(n, y, P)) + "</th>\n"));
            for(t = 0; t < u.length; ++t){
                for(var _ = [], g = 0; g < d.length; ++g)x.helper.isUndefined(u[t][g]), _.push((i = u[t][g], "<td" + p[g] + ">" + x.subParser("spanGamut")(i, y, P) + "</td>\n"));
                h.push(_);
            }
            for(var m = d, f = h, b = "<table>\n<thead>\n<tr>\n", w = m.length, k = 0; k < w; ++k)b += m[k];
            for(b += "</tr>\n</thead>\n<tbody>\n", k = 0; k < f.length; ++k){
                b += "<tr>\n";
                for(var v = 0; v < w; ++v)b += f[k][v];
                b += "</tr>\n";
            }
            return b += "</tbody>\n</table>\n";
        }
        return e = (e = (e = (e = P.converter._dispatch("tables.before", e, y, P)).replace(/\\(\|)/g, x.helper.escapeCharactersCallback)).replace(/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm, r)).replace(/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm, r), e = P.converter._dispatch("tables.after", e, y, P);
    }), x.subParser("underline", function(e, r, t) {
        "use strict";
        return r.underline ? (e = t.converter._dispatch("underline.before", e, r, t), e = (e = r.literalMidWordUnderscores ? (e = e.replace(/\b___(\S[\s\S]*?)___\b/g, function(e, r) {
            return "<u>" + r + "</u>";
        })).replace(/\b__(\S[\s\S]*?)__\b/g, function(e, r) {
            return "<u>" + r + "</u>";
        }) : (e = e.replace(/___(\S[\s\S]*?)___/g, function(e, r) {
            return /\S$/.test(r) ? "<u>" + r + "</u>" : e;
        })).replace(/__(\S[\s\S]*?)__/g, function(e, r) {
            return /\S$/.test(r) ? "<u>" + r + "</u>" : e;
        })).replace(/(_)/g, x.helper.escapeCharactersCallback), t.converter._dispatch("underline.after", e, r, t)) : e;
    }), x.subParser("unescapeSpecialChars", function(e, r, t) {
        "use strict";
        return e = (e = t.converter._dispatch("unescapeSpecialChars.before", e, r, t)).replace(/¨E(\d+)E/g, function(e, r) {
            r = parseInt(r);
            return String.fromCharCode(r);
        }), e = t.converter._dispatch("unescapeSpecialChars.after", e, r, t);
    }), x.subParser("makeMarkdown.blockquote", function(e, r) {
        "use strict";
        var t = "";
        if (e.hasChildNodes()) for(var a = e.childNodes, n = a.length, s = 0; s < n; ++s){
            var o = x.subParser("makeMarkdown.node")(a[s], r);
            "" !== o && (t += o);
        }
        return t = "> " + (t = t.trim()).split("\n").join("\n> ");
    }), x.subParser("makeMarkdown.codeBlock", function(e, r) {
        "use strict";
        var t = e.getAttribute("language"), e = e.getAttribute("precodenum");
        return "```" + t + "\n" + r.preList[e] + "\n```";
    }), x.subParser("makeMarkdown.codeSpan", function(e) {
        "use strict";
        return "`" + e.innerHTML + "`";
    }), x.subParser("makeMarkdown.emphasis", function(e, r) {
        "use strict";
        var t = "";
        if (e.hasChildNodes()) {
            t += "*";
            for(var a = e.childNodes, n = a.length, s = 0; s < n; ++s)t += x.subParser("makeMarkdown.node")(a[s], r);
            t += "*";
        }
        return t;
    }), x.subParser("makeMarkdown.header", function(e, r, t) {
        "use strict";
        var t = new Array(t + 1).join("#"), a = "";
        if (e.hasChildNodes()) for(var a = t + " ", n = e.childNodes, s = n.length, o = 0; o < s; ++o)a += x.subParser("makeMarkdown.node")(n[o], r);
        return a;
    }), x.subParser("makeMarkdown.hr", function() {
        "use strict";
        return "---";
    }), x.subParser("makeMarkdown.image", function(e) {
        "use strict";
        var r = "";
        return e.hasAttribute("src") && (r = (r += "![" + e.getAttribute("alt") + "](") + "<" + e.getAttribute("src") + ">", e.hasAttribute("width") && e.hasAttribute("height") && (r += " =" + e.getAttribute("width") + "x" + e.getAttribute("height")), e.hasAttribute("title") && (r += ' "' + e.getAttribute("title") + '"'), r += ")"), r;
    }), x.subParser("makeMarkdown.links", function(e, r) {
        "use strict";
        var t = "";
        if (e.hasChildNodes() && e.hasAttribute("href")) {
            for(var a = e.childNodes, n = a.length, t = "[", s = 0; s < n; ++s)t += x.subParser("makeMarkdown.node")(a[s], r);
            t = (t += "](") + ("<" + e.getAttribute("href") + ">"), e.hasAttribute("title") && (t += ' "' + e.getAttribute("title") + '"'), t += ")";
        }
        return t;
    }), x.subParser("makeMarkdown.list", function(e, r, t) {
        "use strict";
        var a = "";
        if (!e.hasChildNodes()) return "";
        for(var n = e.childNodes, s = n.length, o = e.getAttribute("start") || 1, i = 0; i < s; ++i)void 0 !== n[i].tagName && "li" === n[i].tagName.toLowerCase() && (a += ("ol" === t ? o.toString() + ". " : "- ") + x.subParser("makeMarkdown.listItem")(n[i], r), ++o);
        return (a += "\n<!-- -->\n").trim();
    }), x.subParser("makeMarkdown.listItem", function(e, r) {
        "use strict";
        for(var t = "", a = e.childNodes, n = a.length, s = 0; s < n; ++s)t += x.subParser("makeMarkdown.node")(a[s], r);
        return /\n$/.test(t) ? t = t.split("\n").join("\n    ").replace(/^ {4}$/gm, "").replace(/\n\n+/g, "\n\n") : t += "\n", t;
    }), x.subParser("makeMarkdown.node", function(e, r, t) {
        "use strict";
        t = t || !1;
        var a = "";
        if (3 === e.nodeType) return x.subParser("makeMarkdown.txt")(e, r);
        if (8 === e.nodeType) return "<!--" + e.data + "-->\n\n";
        if (1 !== e.nodeType) return "";
        switch(e.tagName.toLowerCase()){
            case "h1":
                t || (a = x.subParser("makeMarkdown.header")(e, r, 1) + "\n\n");
                break;
            case "h2":
                t || (a = x.subParser("makeMarkdown.header")(e, r, 2) + "\n\n");
                break;
            case "h3":
                t || (a = x.subParser("makeMarkdown.header")(e, r, 3) + "\n\n");
                break;
            case "h4":
                t || (a = x.subParser("makeMarkdown.header")(e, r, 4) + "\n\n");
                break;
            case "h5":
                t || (a = x.subParser("makeMarkdown.header")(e, r, 5) + "\n\n");
                break;
            case "h6":
                t || (a = x.subParser("makeMarkdown.header")(e, r, 6) + "\n\n");
                break;
            case "p":
                t || (a = x.subParser("makeMarkdown.paragraph")(e, r) + "\n\n");
                break;
            case "blockquote":
                t || (a = x.subParser("makeMarkdown.blockquote")(e, r) + "\n\n");
                break;
            case "hr":
                t || (a = x.subParser("makeMarkdown.hr")(e, r) + "\n\n");
                break;
            case "ol":
                t || (a = x.subParser("makeMarkdown.list")(e, r, "ol") + "\n\n");
                break;
            case "ul":
                t || (a = x.subParser("makeMarkdown.list")(e, r, "ul") + "\n\n");
                break;
            case "precode":
                t || (a = x.subParser("makeMarkdown.codeBlock")(e, r) + "\n\n");
                break;
            case "pre":
                t || (a = x.subParser("makeMarkdown.pre")(e, r) + "\n\n");
                break;
            case "table":
                t || (a = x.subParser("makeMarkdown.table")(e, r) + "\n\n");
                break;
            case "code":
                a = x.subParser("makeMarkdown.codeSpan")(e, r);
                break;
            case "em":
            case "i":
                a = x.subParser("makeMarkdown.emphasis")(e, r);
                break;
            case "strong":
            case "b":
                a = x.subParser("makeMarkdown.strong")(e, r);
                break;
            case "del":
                a = x.subParser("makeMarkdown.strikethrough")(e, r);
                break;
            case "a":
                a = x.subParser("makeMarkdown.links")(e, r);
                break;
            case "img":
                a = x.subParser("makeMarkdown.image")(e, r);
                break;
            default:
                a = e.outerHTML + "\n\n";
        }
        return a;
    }), x.subParser("makeMarkdown.paragraph", function(e, r) {
        "use strict";
        var t = "";
        if (e.hasChildNodes()) for(var a = e.childNodes, n = a.length, s = 0; s < n; ++s)t += x.subParser("makeMarkdown.node")(a[s], r);
        return t = t.trim();
    }), x.subParser("makeMarkdown.pre", function(e, r) {
        "use strict";
        e = e.getAttribute("prenum");
        return "<pre>" + r.preList[e] + "</pre>";
    }), x.subParser("makeMarkdown.strikethrough", function(e, r) {
        "use strict";
        var t = "";
        if (e.hasChildNodes()) {
            t += "~~";
            for(var a = e.childNodes, n = a.length, s = 0; s < n; ++s)t += x.subParser("makeMarkdown.node")(a[s], r);
            t += "~~";
        }
        return t;
    }), x.subParser("makeMarkdown.strong", function(e, r) {
        "use strict";
        var t = "";
        if (e.hasChildNodes()) {
            t += "**";
            for(var a = e.childNodes, n = a.length, s = 0; s < n; ++s)t += x.subParser("makeMarkdown.node")(a[s], r);
            t += "**";
        }
        return t;
    }), x.subParser("makeMarkdown.table", function(e, r) {
        "use strict";
        for(var t = "", a = [
            [],
            []
        ], n = e.querySelectorAll("thead>tr>th"), s = e.querySelectorAll("tbody>tr"), o = 0; o < n.length; ++o){
            var i = x.subParser("makeMarkdown.tableCell")(n[o], r), l = "---";
            if (n[o].hasAttribute("style")) switch(n[o].getAttribute("style").toLowerCase().replace(/\s/g, "")){
                case "text-align:left;":
                    l = ":---";
                    break;
                case "text-align:right;":
                    l = "---:";
                    break;
                case "text-align:center;":
                    l = ":---:";
            }
            a[0][o] = i.trim(), a[1][o] = l;
        }
        for(o = 0; o < s.length; ++o)for(var c = a.push([]) - 1, u = s[o].getElementsByTagName("td"), d = 0; d < n.length; ++d){
            var p = " ";
            void 0 !== u[d] && (p = x.subParser("makeMarkdown.tableCell")(u[d], r)), a[c].push(p);
        }
        var h = 3;
        for(o = 0; o < a.length; ++o)for(d = 0; d < a[o].length; ++d){
            var _ = a[o][d].length;
            h < _ && (h = _);
        }
        for(o = 0; o < a.length; ++o){
            for(d = 0; d < a[o].length; ++d)1 === o ? ":" === a[o][d].slice(-1) ? a[o][d] = x.helper.padEnd(a[o][d].slice(-1), h - 1, "-") + ":" : a[o][d] = x.helper.padEnd(a[o][d], h, "-") : a[o][d] = x.helper.padEnd(a[o][d], h);
            t += "| " + a[o].join(" | ") + " |\n";
        }
        return t.trim();
    }), x.subParser("makeMarkdown.tableCell", function(e, r) {
        "use strict";
        var t = "";
        if (!e.hasChildNodes()) return "";
        for(var a = e.childNodes, n = a.length, s = 0; s < n; ++s)t += x.subParser("makeMarkdown.node")(a[s], r, !0);
        return t.trim();
    }), x.subParser("makeMarkdown.txt", function(e) {
        "use strict";
        e = e.nodeValue;
        return e = (e = e.replace(/ +/g, " ")).replace(/¨NBSP;/g, " "), e = (e = (e = (e = (e = (e = (e = (e = (e = x.helper.unescapeHTMLEntities(e)).replace(/([*_~|`])/g, "\\$1")).replace(/^(\s*)>/g, "\\$1>")).replace(/^#/gm, "\\#")).replace(/^(\s*)([-=]{3,})(\s*)$/, "$1\\$2$3")).replace(/^( {0,3}\d+)\./gm, "$1\\.")).replace(/^( {0,3})([+-])/gm, "$1\\$2")).replace(/]([\s]*)\(/g, "\\]$1\\(")).replace(/^ {0,3}\[([\S \t]*?)]:/gm, "\\[$1]:");
    });
    "function" == typeof define && define.amd ? define(function() {
        "use strict";
        return x;
    }) : "undefined" != typeof module && module.exports ? module.exports = x : this.showdown = x;
}).call(this);

//# sourceMappingURL=changelog.49658a0c.js.map
